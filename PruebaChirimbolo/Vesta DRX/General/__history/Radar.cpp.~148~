//---------------------------------------------------------------------------
#include "Radar.h"
#include "QuickSyn.h"
#include "IntegratedData.h"
#include "DataParameters.h"
#include "FIFOinterface.h"
#include "Site.h"

#pragma hdrstop

#pragma package(smart_init)

//---------------------------------------------------------------------------
__fastcall Radar::Radar(bool CreateSuspended) : TThread(CreateSuspended){
	Priority = tpHighest;

	fGathering     = false;
	CurrentIntAzim = 0;
	CurrentIntElev = 0;
	CurrentSTALOFrequency = 0;
	fAFCChangesInhibited = false;
	fLastError = "";
	fStaloUpdateTime = 0;

	Stalo = new QuickSyn();
	SetupInterface();
	fInitializeSTALO = false;
}
//---------------------------------------------------------------------------

void Radar::setRequestedPulseMode(int value){
	if(!UpdatePulseModeNeeded){
		if(value == LongPulse)
			RequestedPulseMode = LP_MODE;
		else
			RequestedPulseMode = RequestedPRF_Rate * 5;
	}
}

void Radar::setRequestedPRF_Rate(int value){
	if(!UpdatePulseModeNeeded){
		RequestedPRF_Rate = value  & 0x3;
		if(RequestedPulseMode != LP_MODE)
			RequestedPulseMode = RequestedPRF_Rate * 5;
	}
}

void Radar::setRequestedSectorMode(int value){
	if(!UpdatePulseModeNeeded){
		RequestedSectorMode = value;
	}
}

void Radar::setRequestedOutputMode(bool value){
	if(!UpdatePulseModeNeeded){
		RequestedOutputMode = value;
	}
}

int Radar::getPRF_Rate(){
	return CurrentPRF_Rate;
}

int Radar::getSectorMode(){
	return CurrentSectorMode;
}

bool Radar::getOutputMode(){
	return CurrentOutputMode;
}

void Radar::DisableSynch(){
	setRequestedOutputMode(false);
	UpdateSynch();
}

void Radar::EnableSynch(){
	setRequestedOutputMode(true);
	UpdateSynch();
}

void Radar::UpdateSynch(){
	if(!UpdatePulseModeNeeded)
		UpdatePulseModeNeeded = true;
}

bool Radar::SyncChanging(){
  return UpdatePulseModeNeeded;
}

void Radar::SetSyncWord(){
	int Sync_Code = (int)1 << Code_Sync;

	int Sync_Data = 0;
	if(RequestedPulseMode != LP_MODE)
		Sync_Data |= (int)1 << Value_Pulse_Length;

	if(RequestedPRF_Rate != PRF_Rate_None)
		Sync_Data |= (int)1 << Value_PRF_Mode;

	Sync_Data |= (int)1 << Value_Calibration_Mode;

	Sync_Data |= RequestedPRF_Rate << Value_PRF_Rate;

	int rays = (RequestedSectorMode == smRays) ? ThisSite->SectorRays : 0;
	Sync_Data |= RequestedSectorMode << rays;

	if(RequestedSectorMode == smElevation)
		Sync_Data |= (int)1 << Value_Sector_Direction;

	if(RequestedOutputMode){
		Sync_Data |= (int)1 << Value_Sync_Output;
		TheProcessingThread->ResetFilter();
	}

	UpdatePulseMode = Sync_Code | Sync_Data;
	DIOInterface->WriteWord(UpdatePulseMode);

	CurrentPulseMode           = RequestedPulseMode;
	CurrentPRF_Rate            = RequestedPRF_Rate;
	CurrentSectorMode          = RequestedSectorMode;
	CurrentOutputMode          = RequestedOutputMode;

	ClearDigitalOutputs();
	UpdatePulseModeNeeded = false;
}

//Antena
void Radar::SetCurrentIntAzim(int Value){
	CurrentIntAzim = Value;
}

void Radar::SetCurrentIntElev(int Value){
	CurrentIntElev = Value;
}

int  Radar::GetCurrentIntAzim(){
  return CurrentIntAzim;
}

int  Radar::GetCurrentIntElev(){
	return CurrentIntElev;
}

int Radar::GetCurrentPulseMode(){
	return CurrentPulseMode;
}

bool Radar::SyncChanged(){
	return RequestedPulseMode != CurrentPulseMode;
}

void Radar::ClearDigitalOutputs(){
	DIOInterface->WriteWord(0x00000000);
}

//---------------------------------------------------------------------------

__fastcall Radar::SetupInterface(){
	DIOInterface = new FIFOInterface(FifoB);
	NCOInterface = new FIFOInterface(FifoE);
}

void Radar::InitSTALO(){
  __try{
	if(!Stalo->Ready){
		Synchronize(ConnectSTALO);

		if(Stalo->Connected){
			Stalo->Reset();

			SetStaloFrequency(ThisSite->Stalo_Frequency);
			SetStaloPower(ThisSite->Stalo_Power);
			SetStaloOutput(true);
			SetNCOFrequency(IF);
		}
	}
  }
  __finally{
	fInitializeSTALO = false;
  }
}

void Radar::InitSynch(){
	setRequestedSectorMode(smRays);
	setRequestedOutputMode(false);

	setRequestedPulseMode(LongPulse);
	setRequestedPRF_Rate(PRF_Rate_None);

	UpdateSynch();
}

//---------------------------------------------------------------------------
void __fastcall Radar::Execute(){
  ClearDigitalOutputs();

  while(!Terminated){
	if(UpdatePulseModeNeeded)
	   SetSyncWord();

	if(fInitializeSTALO)
		InitSTALO();

	if(StaloChanged()){
	   Sleep(10);
	   if(SettlingFrequency){
		   CurrentSTALOFrequency = RequestedSTALOFrequency;
		   SettlingFrequency = false;
	   }
	   if(SettlingOutput){
		   CurrentSTALOOutput = RequestedSTALOOutput;
		   SettlingOutput = false;
	   }

	   if(SettlingPower){
	   	   SettlingPower = false;
	   }
	}else{
		if(FreqUpdateNeeded){
			SettlingFrequency = true;
			FreqUpdateNeeded = false;
			Stalo->SetFrequency(RequestedSTALOFrequency);
		}
		else if(PowerUpdateNeeded){
			SettlingPower = true;
			Stalo->SetPower(RequestedSTALOPower);
			PowerUpdateNeeded = false;
		}
		else if(OutputUpdateNeeded){
			SettlingOutput = true;
			OutputUpdateNeeded = false;
			if(RequestedSTALOOutput)
				Stalo->SetOutputON();
			else
				Stalo->SetOutputOff();
		}
		else{
			if(GetTickCount() - fStaloUpdateTime > 5000){
				Stalo->Update();
				fStaloUpdateTime = GetTickCount();
			}
			else Sleep(50);
		}
	}
  }
  Stalo->Disconnect();
  Stalo->~QuickSyn();
}
//---------------------------------------------------------------------------

bool Radar::SetStaloFrequency(INT64 freq){
  bool result = false;

  if(!StaloChanged() && !FreqUpdateNeeded){
	  RequestedSTALOFrequency = freq;
	  FreqUpdateNeeded = true;
	  result = true;
  }

  return result;
}

bool Radar::SetStaloPower(double power){
  bool result = false;

  if(!StaloChanged() && !PowerUpdateNeeded){
	  RequestedSTALOPower = power;
	  PowerUpdateNeeded = true;
	  result = true;
  }

  return result;
}

bool Radar::SetStaloOutput(bool output){
  bool result = false;

  if(!StaloChanged() && !OutputUpdateNeeded){
	  RequestedSTALOOutput = output;
	  OutputUpdateNeeded = true;
	  result = true;
  }

  return result;
}

bool Radar::OutputNCOFrequencyDemand(INT64 MeasuredIF){
	HE_INT32 NCOwordout = 0;
	NCOwordout = (MeasuredIF / CLOCKSPD) * TWOTO32 + 0.5;
	NCOInterface->WriteWord(NCOwordout);
};

INT64 Radar::GetSTALOFrequency(){
   return CurrentSTALOFrequency;
}

bool Radar::GetSTALOOutput(){
   return CurrentSTALOOutput;
}

INT64 Radar::GetNCOFrequency(){
   return RequestedNCOFrequency;
}

void Radar::SetNCOFrequency(INT64 freq){
  RequestedNCOFrequency = freq;
  OutputNCOFrequencyDemand(RequestedNCOFrequency);
}

void Radar::SetAFCChangesInhibited(bool Value){
   fAFCChangesInhibited = Value;
}

bool Radar::GetAFCChangesInhibited(){
   return fAFCChangesInhibited;
}

bool Radar::StaloChanged(){
	return SettlingFrequency || SettlingPower || SettlingOutput;
}

bool Radar::GetGathering(){
	return fGathering;
}

void Radar::SetGathering(bool value){
	fGathering = value;
	fLastError = "";
}

String Radar::GetLastError(){
	return fLastError;
}

void Radar::SetLastError(String error){
	fLastError = error;
	if(error != ""){
		if(fGathering){
			fGathering = false;
			if(FOnGatheringError != NULL){
			  FOnGatheringError(fLastError);
			}
		}
	}
}

void Radar::NeedInitSTALO(){
	fInitializeSTALO = true;
}

void __fastcall Radar::ConnectSTALO(){
	Stalo->Connect();
}
