//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "Site.h"
#include "ShellChirimbolo.h"
#include "DataParameters.h"
#include "IntegratedData.h"
#include "AFCprocessor.h"
#include "ProcessingThread.h"
#include "FFTReal.h"
#include "CommModule.h"
#include "PackageManager.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)
#pragma link "perfgrap"
#pragma link "Chart"
#pragma link "TeEngine"
#pragma link "TeeProcs"
#pragma link "Series"
#pragma resource "*.dfm"
TForm1 *Form1;

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner): TForm(Owner)
{
	Randomize();
}

//---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
	// Create the WebBrokerBridge
	FWebBrokerBridge = new TIdHTTPWebBrokerBridge(this);

	FWebBrokerBridge->RegisterWebModuleClass(__classid(TCommunicationModule));
	FWebBrokerBridge->DefaultPort = ThisSite->settings->WS_Port;

	// In order to prevent the opening and closing
	// of a socket for each command set the following options:
	// - KeepAlive: Leave connection open for next command.
	// - AutoStartSession: In case no connection is open start a new session
	// with a new connection.
	FWebBrokerBridge->KeepAlive = true;
	FWebBrokerBridge->AutoStartSession = true;

	// Register a handler to the OnConnect event
	FWebBrokerBridge->OnConnect = ConnectionEvent;
	FWebBrokerBridge->Active = true;

	TheACFProcessingThread->OnNewData    = AFC_NewData;
	TheProcessingThread->OnNewSectorData = Sector_NewData;
}

void __fastcall TForm1::ConnectionEvent(TIdContext *AThread ){
  AThread->Connection->Socket->UseNagle = false;
}

//---------------------------------------------------------------------------
void __fastcall TForm1::FormDestroy(TObject *Sender)
{
  TheACFProcessingThread->OnNewData    = NULL;
  TheProcessingThread->OnNewSectorData = NULL;
  ThisSite->TheRadar->ClearDigitalOutputs();
  ThisSite->TheRadar->Stalo->Disconnect();
}

//---------------------------------------------------------------------------

bool TForm1::WaitForScan()
{
	 while( ThisSite->TheRadar->GetGathering()){
	  Sleep(100);
	 }
}

IntegratedData* TForm1::SetDataStore(int RayCount)
{
  IntegratedData *TheData;

  if(ThisSite->TheRadar->GetCurrentPulseMode() == LP_MODE)
	TheData = new IntegratedData(1, RayCount, RAW_DATA_LENGTH_LP, LP_MODE, 0);
  else
	TheData = new IntegratedData(1, RayCount, RAW_DATA_LENGTH_SP, ThisSite->TheRadar->GetCurrentPulseMode(), 0);

  TheProcessingThread->SetDataStore(TheData);

  return TheData;
}

//---------------------------------------------------------------------------

void __fastcall TForm1::AFC_NewData(System::TObject* Sender, __int64 IF, __int64 Tx, double power, HE_PINT32BUFFER data, FFTReal *fft){
	if(GetTickCount() - TxPackTime > TxMsgRefreshTime){
		//send pakage...
		if(thePackageManager->TX_Burst){
			thePackageManager->AddPackage(MSG_TX_Burst, SAMPLES_PER_IP_CHAN, data);
		}
		if(thePackageManager->TX_Spectrum){
			int minIndex = 0.2 * fft->get_length();
			int maxIndex = 0.4 * fft->get_length();
			int count = maxIndex - minIndex + 1;

			float* buffer = new float[count];

			for(int i=minIndex; i<=maxIndex; i++){
				buffer[i-minIndex] = fft->AbsOut[i];
			}

			thePackageManager->AddPackage(MSG_TX_Spectrum, minIndex, fft->get_length(), dtFloat, count, buffer);
			delete buffer;
		}

		TxPackTime = GetTickCount();
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm1::Sector_NewData(System::TObject* Sender, int Az, int El, int rays, int mode, int ndata, float *RawPower, float *CorrectedPower, float *Power, float *Doppler, float *Width, float *SQI, float *CI){
	if(GetTickCount() - RxPackTime > RxMsgRefreshTime){
		if(thePackageManager->TX_RX_Table){
			thePackageManager->AddPackage(MSG_TX_RX_Table, Az, El, dtFloat, ndata, CorrectedPower);
		}
		if(thePackageManager->TX_RX_Power){
			thePackageManager->AddPackage(MSG_TX_RX_Power, Az, El, dtFloat, ndata, RawPower);
		}
		if(thePackageManager->RX_Power){
			thePackageManager->AddPackage(MSG_RX_Power, Az, El, dtFloat, ndata, Power);
		}
		if(thePackageManager->RX_Speed){
			thePackageManager->AddPackage(MSG_RX_Speed, Az, El, dtFloat, ndata, Doppler);
		}
		if(thePackageManager->RX_Spectrum){
			thePackageManager->AddPackage(MSG_RX_Spectrum, Az, El, dtFloat, ndata, Width);
		}
		if(thePackageManager->RX_Sqi){
			thePackageManager->AddPackage(MSG_RX_SQI, Az, El, dtFloat, ndata, SQI);
		}
		if(thePackageManager->RX_Ci){
			thePackageManager->AddPackage(MSG_RX_CI, Az, El, dtFloat, ndata, CI);
		}

		RxPackTime = GetTickCount();
	}
}

void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
	if(thePackageManager->TX_Burst){
		short * data = new short[SAMPLES_PER_IP_CHAN];
		for(int i=0; i<SAMPLES_PER_IP_CHAN; i++){
			if(i<150)
				data[i] = Random(3000);
			else
				data[i] = 0;
		}

		thePackageManager->AddPackage(MSG_TX_Burst, SAMPLES_PER_IP_CHAN, data);
		delete data;
	}

	if(thePackageManager->RX_Power){
		float* data = (float*)AllocMem(1000 * sizeof(float));
		for(int i=0; i<1000; i++){
			if(i<500)
				data[i] = Random(5000);
			else
				data[i] = 0;
		}

		thePackageManager->AddPackage(MSG_RX_Power, 0, 0, dtFloat, 1000, data);
		FreeMemory(data);
	}

	if(thePackageManager->TX_RX_Power){
		float* data = (float*)AllocMem(1000 * sizeof(float));
		for(int i=0; i<1000; i++){
			if(i<500)
				data[i] = Random(5000);
			else
				data[i] = 0;
		}

		thePackageManager->AddPackage(MSG_TX_RX_Power, 0, 0, dtFloat, 1000, data);
		FreeMemory(data);
	}

	if(thePackageManager->RX_Spectrum){
		float* data = (float*)AllocMem(1000 * sizeof(float));
		for(int i=0; i<1000; i++){
			if(i<500)
				data[i] = Random(5000);
			else
				data[i] = 0;
		}

		thePackageManager->AddPackage(MSG_RX_Spectrum, 0, 0, dtFloat, 1000, data);
		FreeMemory(data);
	}

	if(thePackageManager->RX_Speed){
		float* data = (float*)AllocMem(1000 * sizeof(float));
		for(int i=0; i<1000; i++){
			if(i<500)
				data[i] = Random(5000);
			else
				data[i] = 0;
		}

		thePackageManager->AddPackage(MSG_RX_Speed, 0, 0, dtFloat, 1000, data);
		FreeMemory(data);
	}

	if(thePackageManager->RX_Sqi){
		float* data = (float*)AllocMem(1000 * sizeof(float));
		for(int i=0; i<1000; i++){
			if(i<500)
				data[i] = Random(5000);
			else
				data[i] = 0;
		}

		thePackageManager->AddPackage(MSG_RX_SQI, 0, 0, dtFloat, 1000, data);
		FreeMemory(data);
	}

	if(thePackageManager->RX_Ci){
		float* data = (float*)AllocMem(1000 * sizeof(float));
		for(int i=0; i<1000; i++){
			if(i<500)
				data[i] = Random(5000);
			else
				data[i] = 0;
		}

		thePackageManager->AddPackage(MSG_RX_CI, 0, 0, dtFloat, 1000, data);
		FreeMemory(data);
	}
}
//---------------------------------------------------------------------------




