//---------------------------------------------------------------------------
#define Hunt

#include <vcl.h>
#include <math.h>
#include <IdTCPServer.hpp>
#include <IniFiles.hpp>
#include <hesl.h>

#include "Site.h"
#include "AFCprocessor.h"
#include "ProcessingThread.h"
#include "PackageManager.h"
#include "ObsManager.h"
#include "PaintThread.h"
#include "CommunicationManager.h"

#pragma hdrstop

//---------------------------------------------------------------------------

USEFORM("DRX\ShellDRX.cpp", Shell_DRX);
USEFORM("DRX\Comm\CommModule.cpp", CommunicationModule); /* TWebModule: File Type */
//---------------------------------------------------------------------------
#pragma link "WebReq.obj"
#pragma link "SockAppHlpr.obj"
#pragma link "IndySystem.lib"
#pragma link "IndyCore.lib"

//---------------------------------------------------------------------------

const SIZE_T MinWorkingSetSizeDefault = 500;
const SIZE_T MaxWorkingSetSizeDefault = 1000;

Site 				 *ThisSite;
ProcessingThread     *TheProcessingThread;
AFCProcessingThread  *TheACFProcessingThread;
PackageManager       *thePackageManager;
ObservationManager   *theObservationManager;
TIdTCPServer         *theDataSenderServer;
TIdTCPServer         *theObsSenderServer;
TIdTCPServer         *theCommunicationServer;
TPaintThread         *thePaintThread;
CommunicationManager *theCommunicationManager;

/*

type        The type of mathematical error that occurred; an enum type defined in the typedef _mexcep (see definition after this list).
name        A pointer to a null-terminated string holding the name of the math library function that resulted in an error.
arg1, arg2  The arguments (passed to the function that name points to) caused the error; if only one argument was passed to the function, it is stored in arg1.
retval      The default return value for _matherr (or _matherrl); you can modify this value.

DOMAIN    Argument was not in domain of function, such as log(-1).
SING      Argument would result in a singularity, such as pow(0, -2).
OVERFLOW  Argument would produce a function result greater than DBL_MAX (or LDBL_MAX), such as exp(1000).
UNDERFLOW Argument would produce a function result less than DBL_MIN (or LDBL_MIN), such as exp(-1000).
TLOSS     Argument would produce function result with total loss of significant digits, such as sin(10e70).

*/

int _matherr(struct _exception* error)
{
	error->retval = 0;
	return 1;

/*
	if(strcmp(error->name, "log10") == 0) {
		error->retval = 0;
		return 1;
	}
	if(strcmp(error->name, "sqrt") == 0) {
		error->retval = 0;
		return 1;
	}

	return 0;
*/
}

void InitSystem(){
#ifdef Hunt
	String heartConfig = ExtractFileDir(ParamStr(0)) + "\\Config";
	String heartFileName = heartConfig + "\\Heart.net ";
	char* heartPath = heartFileName.c_str();

	hesl sl;
	ChDir(heartConfig);
	int hr;
	hr = sl.serverloader("-rla", heartPath);
	//hr = sl.serverloader("-rl", heartPath);

	if(hr != 0)
		throw new Exception("Tarjeta Hunt no responde");
#endif

	ThisSite = new Site();
	ThisSite->TheRadar->NeedInitSTALO();
	ThisSite->TheRadar->InitSynch();

	TheACFProcessingThread  = new AFCProcessingThread(true);
	TheProcessingThread     = new ProcessingThread(true);
	thePackageManager       = new PackageManager();
	theObservationManager   = new ObservationManager();
	theCommunicationManager = new CommunicationManager();

	TIdSocketHandle *Binding;

	theDataSenderServer = new TIdTCPServer(NULL);
	theDataSenderServer->DefaultPort = ThisSite->Stream_Port;
	theDataSenderServer->Bindings->Clear();
	Binding = theDataSenderServer->Bindings->Add();
	Binding->Port = ThisSite->Stream_Port;
	theDataSenderServer->MaxConnections = 1;
	theDataSenderServer->OnConnect = thePackageManager->PackageClientConnect;
	theDataSenderServer->OnExecute = thePackageManager->PackageClientExecute;

	theObsSenderServer = new TIdTCPServer(NULL);
	theObsSenderServer->DefaultPort = ThisSite->Doppler_Port;
	theObsSenderServer->Bindings->Clear();
	Binding = theObsSenderServer->Bindings->Add();
	Binding->Port = ThisSite->Doppler_Port;
	theObsSenderServer->MaxConnections = 1;
	theObsSenderServer->OnConnect    = theObservationManager->RCP_Connect;
	theObsSenderServer->OnDisconnect = theObservationManager->RCP_Disconnect;
	theObsSenderServer->OnExecute    = theObservationManager->RCP_Execute;

	theCommunicationServer = new TIdTCPServer(NULL);
	theCommunicationServer->DefaultPort = ThisSite->Communication_Port;
	theCommunicationServer->Bindings->Clear();
	Binding = theCommunicationServer->Bindings->Add();
	Binding->Port = ThisSite->Communication_Port;
	theCommunicationServer->MaxConnections = 1;
	theCommunicationServer->OnConnect = theCommunicationManager->CommunicationClientConnect;
	theCommunicationServer->OnExecute = theCommunicationManager->CommunicationClientExecute;
}

void StartSystem(){
	TheACFProcessingThread->Resume();
	TheProcessingThread->Resume();
	ThisSite->TheRadar->Resume();

	theDataSenderServer->Active = true;
	theObsSenderServer->Active  = true;
}

void FinalizeSystem(){
	theCommunicationServer->Active = false;
	theObsSenderServer->Active     = false;
	theDataSenderServer->Active    = false;

	ThisSite->TheRadar->Terminate();
	TheProcessingThread->Terminate();
	TheACFProcessingThread->Terminate();
}

WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int)
{
	try
	{
		HANDLE CurrentProcess = GetCurrentProcess();
		SetPriorityClass(CurrentProcess, REALTIME_PRIORITY_CLASS);
		__try{
			String configFileName = ExtractFileDir(ParamStr(0)) + "\\Config.ini";
			TIniFile* config = new TIniFile(configFileName);
			__try{
				SIZE_T MinWorkingSetSize = (config != NULL) ? config->ReadInteger("Memory", "MinimumWorkingSetSize", MinWorkingSetSizeDefault) : MinWorkingSetSizeDefault;
				SIZE_T MaxWorkingSetSize = (config != NULL) ? config->ReadInteger("Memory", "MaximumWorkingSetSize", MaxWorkingSetSizeDefault) : MaxWorkingSetSizeDefault;

				MinWorkingSetSize *= 0x100000;
				MaxWorkingSetSize *= 0x100000;

				SetProcessWorkingSetSize(CurrentProcess, MinWorkingSetSize, MaxWorkingSetSize );
			}
			__finally{
				config->Free();
			}

			Application->Initialize();
			InitSystem();
			Application->Title = "Vesta-DRX";
			SetApplicationMainFormOnTaskBar(Application, true);
			Application->CreateForm(__classid(TCommunicationModule), &CommunicationModule);
		Application->CreateForm(__classid(TShell_DRX), &Shell_DRX);
		StartSystem();

			__try{
				Application->Run();
			}
			__finally{
				FinalizeSystem();
			}
		}
		__finally{
			SetPriorityClass(CurrentProcess, NORMAL_PRIORITY_CLASS);
		}
	}
	catch (Exception &exception){
		Application->ShowException(&exception);
	}
	return 0;
}
//---------------------------------------------------------------------------
