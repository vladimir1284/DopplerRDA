unit FrameObservations;

interface

uses
  Windows, SysUtils, Forms, 
  Rda_TLB, Menus, ImgList, StdCtrls, ExtCtrls, ComCtrls, Controls, Classes,
  Dialogs;

type
  TFrame_Observations = class(TFrame)
    ListView1: TListView;
    Panel1: TPanel;
    Button1: TButton;
    ImageList1: TImageList;
    PopupMenu1: TPopupMenu;
    Editar1: TMenuItem;
    N1: TMenuItem;
    Insertar1: TMenuItem;
    Eliminar1: TMenuItem;
    Clonar1: TMenuItem;
    procedure PopupMenu1Popup(Sender: TObject);
    procedure Insertar1Click(Sender: TObject);
    procedure Eliminar1Click(Sender: TObject);
    procedure Editar1Click(Sender: TObject);
    procedure ListView1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure ListView1SelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure Clonar1Click(Sender: TObject);
  private
    fObservation  : IObservation;
    fObservations : IObservations;
    fControl      : IObservationsControl;
    procedure SetObservations( Value : IObservations );
  public
    procedure UpdateView;
  published
    property Observations : IObservations read fObservations write SetObservations;
    property Control      : IObservationsControl read fControl;
  end;

implementation

{$R *.DFM}

uses
  EditTemplate;

{ TFrame_Observations }

procedure TFrame_Observations.SetObservations(Value: IObservations);
begin
  fObservations := Value;
  if assigned(fObservations)
    then
      begin
        fObservations.QueryInterface(IObservation, fObservation);
        fObservations.QueryInterface(IObservationsControl, fControl);
      end
    else
      begin
        fObservation := nil;
        fControl := nil;
      end;
  UpdateView;
end;

procedure UpdateItem( Item : TListItem; Template : ITemplate );
var
  T : TDateTime;
begin
  with Item, Template do
    begin
      Checked := Automatica;
      Caption := Nombre;
      ImageIndex := Tipo;
      while SubItems.Count < 2 do
        SubItems.Add('');
      T := Proxima;
      if T <> 0
        then SubItems[0] := TimeToStr(T)
        else SubItems[0] := '-';
    end;
end;

function FindItem( Items : TListItems; Name : string ) : TListItem;
var
  I : integer;
begin
  I := 0;
  while (I < Items.Count) and
        (CompareText(Items[I].Caption, Name) <> 0) do
    inc(I);
  if (I < Items.Count)
    then Result := Items[I]
    else Result := Items.Add;
end;

procedure TFrame_Observations.UpdateView;
var
  I : integer;
  T : ITemplate;
begin
  if assigned(Observations)
    then
      begin
        for I := 0 to Observations.Plantillas - 1 do
          begin
            T := Observations.Plantilla(I);
            UpdateItem(FindItem(ListView1.Items, T.Nombre), T);
          end;
        for I := ListView1.Items.Count - 1 downto 0 do
          begin
            T := Observations.Buscar(ListView1.Items[I].Caption);
            if T = nil
              then ListView1.Items.Delete(I);
          end;
      end;
  Button1.Enabled := assigned(Observations) and
                     assigned(ListView1.Selected) and
                     assigned(fObservation) and
                     not fObservation.InProgress;
end;

procedure TFrame_Observations.PopupMenu1Popup(Sender: TObject);
begin
  Insertar1.Enabled := assigned(fControl);
  Editar1.Enabled := Insertar1.Enabled and assigned(ListView1.Selected);
  Eliminar1.Enabled := Editar1.Enabled;
end;

procedure TFrame_Observations.Eliminar1Click(Sender: TObject);
begin  // Eliminar
  if assigned(fControl)
    then fControl.Control(ListView1.Selected.Caption).Eliminar;
  UpdateView;
end;

procedure TFrame_Observations.Editar1Click(Sender: TObject);
var
  Template : ITemplate;
  Control  : ITemplateControl;
begin  // Editar
  Template := fObservations.Buscar(ListView1.Selected.Caption);
  Control  := fControl.Control(ListView1.Selected.Caption);
  if assigned(Template) and assigned(Control)
    then
      with TEdit_Template.Create(Self) do
        try
          GetData(Template);
          if ShowModal = idOk
            then
              begin
                SetData(Control);
                UpdateView;
              end;
        finally
          Release;
        end;
end;

procedure TFrame_Observations.Insertar1Click(Sender: TObject);
begin  // Insertar
  if assigned(fControl)
    then fControl.Nueva;
  UpdateView;
end;

procedure TFrame_Observations.ListView1Click(Sender: TObject);
var
  I : integer;
begin
  for I := 0 to ListView1.Items.Count - 1 do
    with ListView1.Items[I] do
      fObservations.Buscar(Caption).Automatica := Checked;
  UpdateView;
end;

procedure TFrame_Observations.Button1Click(Sender: TObject);
begin
  if assigned(Observations) and assigned(ListView1.Selected)
    then Observations.Ejecutar( ListView1.Selected.Caption );
end;

procedure TFrame_Observations.ListView1SelectItem(Sender: TObject;
  Item: TListItem; Selected: Boolean);
begin
  Button1.Enabled := assigned(Observations) and assigned(ListView1.Selected)
end;

procedure TFrame_Observations.Clonar1Click(Sender: TObject);
begin
  if assigned(fControl)
    then fControl.Clonar(ListView1.Selected.Caption);
  UpdateView;
end;

end.

