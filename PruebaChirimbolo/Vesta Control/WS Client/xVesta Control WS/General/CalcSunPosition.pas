unit CalcSunPosition;

interface

uses
    Math;

type
    Term1 = (TERM_A, TERM_B, TERM_C);
    TermX = (TERM_X0, TERM_X1, TERM_X2, TERM_X3, TERM_X4);
    TermPSI = (TERM_PSI_A, TERM_PSI_B, TERM_EPS_C, TERM_EPS_D);
    JD = (JD_MINUS, JD_ZERO, JD_PLUS);
    SUN = (SUN_TRANSIT, SUN_RISE, SUN_SET);

    double_multi_array = array of array of array of double;
    double_array = array of double;
    alpha_delta_array = array [0..2] of double;

    ARRAY_B_TERMS = array[0..1, 0..4, 0..2] of double;
    ARRAY_PE_TERMS = array[0..62, 0..3] of double;
    ARRAY_Y_TERMS = array[0..62,0..4] of integer;
    ARRAY_R_TERMS = array[0..4, 0..39, 0..2] of double;
    ARRAY_L_TERMS = array[0..5, 0..63, 0..2] of double;
    spa_data = record
         //----------------------INPUT VALUES------------------------

        year,               //(1)  4-digit year      [-2000 to 6000]
        month,              //(2)  2-digit month         [1 to   12]
        day,                //(3)  2-digit day           [1 to   31]
        hour,               //(4)  observer local hour   [0 to   24]
        minute,             //(5)  observer local minute [0 to   59]
        second: word;       //(6)  observer local second [0 to   59]

        delta_t,            //(7)  difference between earth rotation time and terrestrial time
                            //     (from observation)                              [   -8000 to 8000 seconds     ]
        timezone,           //(8)  observer timezone (negative west of greenwich)  [     -12 to   12 hours       ]
        longitude,          //(9)  observer longitude (negative west of greenwich) [    -180 to  180 degrees     ]
        latitude,           //(10) observer latitude (negative south of equator)   [     -90 to   90 degrees     ]
        elevation,          //(11) observer elevation [meters]                     [-6500000 or higher meters    ]
        pressure,           //(12) annual average local pressure                   [       0 to 5000 millibars   ]
        temperature,        //(13) annual average local temperature                [    -273 to 6000 deg. celcius]

        slope,              //(14) surface slope (measured from the horizontal plane) [-360 to 360 degrees]
        azm_rotation,       //(15) surface azimuth rotation (measured from south to projection of
                            //     surface normal on horizontal plane, negative west) [-360 to 360 degrees]

        atmos_refract: single;  //(16) atmospheric refraction at sunrise and sunset       [ -10 to  10 degrees]
                                //     0.5667 degrees is typical

        funtion: integer;   // Switch to choose functions for desired output (from enumeration)

        //-----------------Intermediate OUTPUT VALUES--------------------

        jd,                 //julian day
        jc,                 //julian century;

        jde,                //julian ephemeris day
        jce,                //julian ephemeris century
        jme,                //julian ephemeris millennium

        l,                  //earth heliocentric longitude [degrees]
        b,                  //earth heliocentric latitude [degrees]
        r,                  //earth radius vector [Astronomical Units, AU]

        theta,              //geocentric longitude [degrees]
        beta,               //geocentric latitude [degrees]

        x0,                 //mean elongation (moon-sun) [degrees]
        x1,                 //mean anomaly (sun) [degrees]
        x2,                 //mean anomaly (moon) [degrees]
        x3,                 //argument latitude (moon) [degrees]
        x4,                 //ascending longitude (moon) [degrees]

        del_psi,            //nutation longitude [degrees]
        del_epsilon,        //nutation obliquity [degrees]
        epsilon0,           //ecliptic mean obliquity [arc seconds]
        epsilon,            //ecliptic true obliquity  [degrees]

        del_tau,            //aberration correction [degrees]
        lamda,              //apparent sun longitude [degrees]
        nu0,                //greenwich mean sidereal time [degrees]
        nu,                 //greenwich sidereal time [degrees]

        alpha,              //geocentric sun right ascension [degrees]
        delta,              //geocentric sun declination [degrees]

        h,                  //observer hour angle [degrees]
        xi,                 //sun equatorial horizontal parallax [degrees]
        del_alpha,          //sun right ascension parallax [degrees]
        delta_prime,        //topocentric sun declination [degrees]
        alpha_prime,        //topocentric sun right ascension [degrees]
        h_prime,            //topocentric local hour angle [degrees]

        e0,                 //topocentric elevation angle (uncorrected) [degrees]
        del_e,              //atmospheric refraction correction [degrees]
        e,                  //topocentric elevation angle (corrected) [degrees]
        eot,                //equation of time [minutes]
        srha,               //sunrise hour angle [degrees]
        ssha,               //sunset hour angle [degrees]
        sta: double;        //sun transit altitude [degrees]

        //---------------------Final OUTPUT VALUES------------------------

        zenith,             //topocentric zenith angle [degrees]
        azimuth180,         //topocentric azimuth angle (westward from south) [-180 to 180 degrees]
        azimuth,            //topocentric azimuth angle (eastward from north) [   0 to 360 degrees]
        incidence,          //surface incidence angle [degrees]

        suntransit,         //local sun transit time (or solar noon) [fractional hour]
        sunrise,            //local sunrise time [fractional hour]
        sunset: double;     //local sunset time [fracitonal hour]
    end;


    function spa_calculate( in_year, in_month, in_day, in_hour,
                            in_minute, in_second: word;
                            in_delta_t, in_timezone, in_longitude,
                            in_latitude, in_elevation, in_pressure,
                            in_temperature, in_slope,
                            in_azm_rotation,
                            in_atmos_refract: single): integer;
var
    out_ho, out_seno_ho, out_eot, out_delta: double;
var
    spa, sun_rts: spa_data;
    m_rts: alpha_delta_array;
    A_Terms: double_array;

implementation



const
    TimeZone = -5;
    PI = 3.1415926535897932384626433832795028841971;
    SUN_RADIUS = 0.26667;

    L_COUNT = 6;
    B_COUNT = 2;
    R_COUNT = 5;
    Y_COUNT = 63;

    L_MAX_SUBCOUNT = 64;
    B_MAX_SUBCOUNT = 5;
    R_MAX_SUBCOUNT = 40;

    TERM_COUNT = Ord(TERM_C);
    TERM_X_COUNT = Ord(TERM_X4);
    TERM_Y_COUNT = Ord(TERM_X_COUNT);
    TERM_PE_COUNT = Ord(TERM_EPS_D);
    JD_COUNT = Ord(JD_PLUS);
    SUN_COUNT = Ord(SUN_SET);

    l_subcount: array[0..L_COUNT-1] of Integer = (64,34,20,7,3,1);
    b_subcount: array[0..B_COUNT-1] of Integer = (5,2);
    r_subcount: array[0..R_COUNT-1] of Integer = (40,10,6,2,1);

///////////////////////////////////////////////////
///  Earth Periodic Terms
///////////////////////////////////////////////////
    L_TERMS: ARRAY_L_TERMS =    (
                                    (
                                        (175347046.0,0,0),
                                        (3341656.0,4.6692568,6283.07585),
                                        (34894.0,4.6261,12566.1517),
                                        (3497.0,2.7441,5753.3849),
                                        (3418.0,2.8289,3.5231),
                                        (3136.0,3.6277,77713.7715),
                                        (2676.0,4.4181,7860.4194),
                                        (2343.0,6.1352,3930.2097),
                                        (1324.0,0.7425,11506.7698),
                                        (1273.0,2.0371,529.691),
                                        (1199.0,1.1096,1577.3435),
                                        (990,5.233,5884.927),
                                        (902,2.045,26.298),
                                        (857,3.508,398.149),
                                        (780,1.179,5223.694),
                                        (753,2.533,5507.553),
                                        (505,4.583,18849.228),
                                        (492,4.205,775.523),
                                        (357,2.92,0.067),
                                        (317,5.849,11790.629),
                                        (284,1.899,796.298),
                                        (271,0.315,10977.079),
                                        (243,0.345,5486.778),
                                        (206,4.806,2544.314),
                                        (205,1.869,5573.143),
                                        (202,2.4458,6069.777),
                                        (156,0.833,213.299),
                                        (132,3.411,2942.463),
                                        (126,1.083,20.775),
                                        (115,0.645,0.98),
                                        (103,0.636,4694.003),
                                        (102,0.976,15720.839),
                                        (102,4.267,7.114),
                                        (99,6.21,2146.17),
                                        (98,0.68,155.42),
                                        (86,5.98,161000.69),
                                        (85,1.3,6275.96),
                                        (85,3.67,71430.7),
                                        (80,1.81,17260.15),
                                        (79,3.04,12036.46),
                                        (71,1.76,5088.63),
                                        (74,3.5,3154.69),
                                        (74,4.68,801.82),
                                        (70,0.83,9437.76),
                                        (62,3.98,8827.39),
                                        (61,1.82,7084.9),
                                        (57,2.78,6286.6),
                                        (56,4.39,14143.5),
                                        (56,3.47,6279.55),
                                        (52,0.19,12139.55),
                                        (52,1.33,1748.02),
                                        (51,0.28,5856.48),
                                        (49,0.49,1194.45),
                                        (41,5.37,8429.24),
                                        (41,2.4,19651.05),
                                        (39,6.17,10447.39),
                                        (37,6.04,10213.29),
                                        (37,2.57,1059.38),
                                        (36,1.71,2352.87),
                                        (36,1.78,6812.77),
                                        (33,0.59,17789.85),
                                        (30,0.44,83996.85),
                                        (30,2.74,1349.87),
                                        (25,3.16,4690.48)
                                    ),
                                    (
                                        (628331966747.0,0,0),
                                        (206059.0,2.678235,6283.07585),
                                        (4303.0,2.6351,12566.1517),
                                        (425.0,1.59,3.523),
                                        (119.0,5.796,26.298),
                                        (109.0,2.966,1577.344),
                                        (93,2.59,18849.23),
                                        (72,1.14,529.69),
                                        (68,1.87,398.15),
                                        (67,4.41,5507.55),
                                        (59,2.89,5223.69),
                                        (56,2.17,155.42),
                                        (45,0.4,796.3),
                                        (36,0.47,775.52),
                                        (29,2.65,7.11),
                                        (21,5.34,0.98),
                                        (19,1.85,5486.78),
                                        (19,4.97,213.3),
                                        (17,2.99,6275.96),
                                        (16,0.03,2544.31),
                                        (16,1.43,2146.17),
                                        (15,1.21,10977.08),
                                        (12,2.83,1748.02),
                                        (12,3.26,5088.63),
                                        (12,5.27,1194.45),
                                        (12,2.08,4694),
                                        (11,0.77,553.57),
                                        (10,1.3,3286.6),
                                        (10,4.24,1349.87),
                                        (9,2.7,242.73),
                                        (9,5.64,951.72),
                                        (8,5.3,2352.87),
                                        (6,2.65,9437.76),
                                        (6,4.67,4690.48),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    ),
                                    (
                                        (52919.0,0,0),
                                        (8720.0,1.0721,6283.0758),
                                        (309.0,0.867,12566.152),
                                        (27,0.05,3.52),
                                        (16,5.19,26.3),
                                        (16,3.68,155.42),
                                        (10,0.76,18849.23),
                                        (9,2.06,77713.77),
                                        (7,0.83,775.52),
                                        (5,4.66,1577.34),
                                        (4,1.03,7.11),
                                        (4,3.44,5573.14),
                                        (3,5.14,796.3),
                                        (3,6.05,5507.55),
                                        (3,1.19,242.73),
                                        (3,6.12,529.69),
                                        (3,0.31,398.15),
                                        (3,2.28,553.57),
                                        (2,4.38,5223.69),
                                        (2,3.75,0.98),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    ),
                                    (
                                        (289.0,5.844,6283.076),
                                        (35,0,0),
                                        (17,5.49,12566.15),
                                        (3,5.2,155.42),
                                        (1,4.72,3.52),
                                        (1,5.3,18849.23),
                                        (1,5.97,242.73),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    ),
                                    (
                                        (114.0,3.142,0),
                                        (8,4.13,6283.08),
                                        (1,3.84,12566.15),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    ),
                                    (
                                        (1,3.14,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    )
                                );

    B_TERMS: ARRAY_B_TERMS =    (
                                    (
                                        (280.0,3.199,84334.662),
                                        (102.0,5.422,5507.553),
                                        (80,3.88,5223.69),
                                        (44,3.7,2352.87),
                                        (32,4,1577.34)
                                    ),
                                    (
                                        (9,3.9,5507.55),
                                        (6,1.73,5223.69),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    )
                                );

    R_TERMS: ARRAY_R_TERMS =    (
                                    (
                                        (100013989.0,0,0),
                                        (1670700.0,3.0984635,6283.07585),
                                        (13956.0,3.05525,12566.1517),
                                        (3084.0,5.1985,77713.7715),
                                        (1628.0,1.1739,5753.3849),
                                        (1576.0,2.8469,7860.4194),
                                        (925.0,5.453,11506.77),
                                        (542.0,4.564,3930.21),
                                        (472.0,3.661,5884.927),
                                        (346.0,0.964,5507.553),
                                        (329.0,5.9,5223.694),
                                        (307.0,0.299,5573.143),
                                        (243.0,4.273,11790.629),
                                        (212.0,5.847,1577.344),
                                        (186.0,5.022,10977.079),
                                        (175.0,3.012,18849.228),
                                        (110.0,5.055,5486.778),
                                        (98,0.89,6069.78),
                                        (86,5.69,15720.84),
                                        (86,1.27,161000.69),
                                        (85,0.27,17260.15),
                                        (63,0.92,529.69),
                                        (57,2.01,83996.85),
                                        (56,5.24,71430.7),
                                        (49,3.25,2544.31),
                                        (47,2.58,775.52),
                                        (45,5.54,9437.76),
                                        (43,6.01,6275.96),
                                        (39,5.36,4694),
                                        (38,2.39,8827.39),
                                        (37,0.83,19651.05),
                                        (37,4.9,12139.55),
                                        (36,1.67,12036.46),
                                        (35,1.84,2942.46),
                                        (33,0.24,7084.9),
                                        (32,0.18,5088.63),
                                        (32,1.78,398.15),
                                        (28,1.21,6286.6),
                                        (28,1.9,6279.55),
                                        (26,4.59,10447.39)
                                    ),
                                    (
                                        (103019.0,1.10749,6283.07585),
                                        (1721.0,1.0644,12566.1517),
                                        (702.0,3.142,0),
                                        (32,1.02,18849.23),
                                        (31,2.84,5507.55),
                                        (25,1.32,5223.69),
                                        (18,1.42,1577.34),
                                        (10,5.91,10977.08),
                                        (9,1.42,6275.96),
                                        (9,0.27,5486.78),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    ),
                                    (
                                        (4359.0,5.7846,6283.0758),
                                        (124.0,5.579,12566.152),
                                        (12,3.14,0),
                                        (9,3.63,77713.77),
                                        (6,1.87,5573.14),
                                        (3,5.47,18849),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    ),
                                    (
                                        (145.0,4.273,6283.076),
                                        (7,3.92,12566.15),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    ),
                                    (
                                        (4,2.56,6283.08),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0),
                                        (0,0,0)
                                    )
                                );

////////////////////////////////////////////////////////////////
///  Periodic Terms for the nutation in longitude and obliquity
////////////////////////////////////////////////////////////////

    Y_TERMS: ARRAY_Y_TERMS =    (
                                    (0,0,0,0,1),
                                    (-2,0,0,2,2),
                                    (0,0,0,2,2),
                                    (0,0,0,0,2),
                                    (0,1,0,0,0),
                                    (0,0,1,0,0),
                                    (-2,1,0,2,2),
                                    (0,0,0,2,1),
                                    (0,0,1,2,2),
                                    (-2,-1,0,2,2),
                                    (-2,0,1,0,0),
                                    (-2,0,0,2,1),
                                    (0,0,-1,2,2),
                                    (2,0,0,0,0),
                                    (0,0,1,0,1),
                                    (2,0,-1,2,2),
                                    (0,0,-1,0,1),
                                    (0,0,1,2,1),
                                    (-2,0,2,0,0),
                                    (0,0,-2,2,1),
                                    (2,0,0,2,2),
                                    (0,0,2,2,2),
                                    (0,0,2,0,0),
                                    (-2,0,1,2,2),
                                    (0,0,0,2,0),
                                    (-2,0,0,2,0),
                                    (0,0,-1,2,1),
                                    (0,2,0,0,0),
                                    (2,0,-1,0,1),
                                    (-2,2,0,2,2),
                                    (0,1,0,0,1),
                                    (-2,0,1,0,1),
                                    (0,-1,0,0,1),
                                    (0,0,2,-2,0),
                                    (2,0,-1,2,1),
                                    (2,0,1,2,2),
                                    (0,1,0,2,2),
                                    (-2,1,1,0,0),
                                    (0,-1,0,2,2),
                                    (2,0,0,2,1),
                                    (2,0,1,0,0),
                                    (-2,0,2,2,2),
                                    (-2,0,1,2,1),
                                    (2,0,-2,0,1),
                                    (2,0,0,0,1),
                                    (0,-1,1,0,0),
                                    (-2,-1,0,2,1),
                                    (-2,0,0,0,1),
                                    (0,0,2,2,1),
                                    (-2,0,2,0,1),
                                    (-2,1,0,2,1),
                                    (0,0,1,-2,0),
                                    (-1,0,1,0,0),
                                    (-2,1,0,0,0),
                                    (1,0,0,0,0),
                                    (0,0,1,2,0),
                                    (0,0,-2,2,2),
                                    (-1,-1,1,0,0),
                                    (0,1,1,0,0),
                                    (0,-1,1,2,2),
                                    (2,-1,-1,2,2),
                                    (0,0,3,2,2),
                                    (2,-1,0,2,2)
                                );

    PE_TERMS: ARRAY_PE_TERMS =  (
                                    (-171996,-174.2,92025,8.9),
                                    (-13187,-1.6,5736,-3.1),
                                    (-2274,-0.2,977,-0.5),
                                    (2062,0.2,-895,0.5),
                                    (1426,-3.4,54,-0.1),
                                    (712,0.1,-7,0),
                                    (-517,1.2,224,-0.6),
                                    (-386,-0.4,200,0),
                                    (-301,0,129,-0.1),
                                    (217,-0.5,-95,0.3),
                                    (-158,0,0,0),
                                    (129,0.1,-70,0),
                                    (123,0,-53,0),
                                    (63,0,0,0),
                                    (63,0.1,-33,0),
                                    (-59,0,26,0),
                                    (-58,-0.1,32,0),
                                    (-51,0,27,0),
                                    (48,0,0,0),
                                    (46,0,-24,0),
                                    (-38,0,16,0),
                                    (-31,0,13,0),
                                    (29,0,0,0),
                                    (29,0,-12,0),
                                    (26,0,0,0),
                                    (-22,0,0,0),
                                    (21,0,-10,0),
                                    (17,-0.1,0,0),
                                    (16,0,-8,0),
                                    (-16,0.1,7,0),
                                    (-15,0,9,0),
                                    (-13,0,7,0),
                                    (-12,0,6,0),
                                    (11,0,0,0),
                                    (-10,0,5,0),
                                    (-8,0,3,0),
                                    (7,0,-3,0),
                                    (-7,0,0,0),
                                    (-7,0,3,0),
                                    (-7,0,3,0),
                                    (6,0,0,0),
                                    (6,0,-3,0),
                                    (6,0,-3,0),
                                    (-6,0,3,0),
                                    (-6,0,3,0),
                                    (5,0,0,0),
                                    (-5,0,3,0),
                                    (-5,0,3,0),
                                    (-5,0,3,0),
                                    (4,0,0,0),
                                    (4,0,0,0),
                                    (4,0,0,0),
                                    (-4,0,0,0),
                                    (-4,0,0,0),
                                    (-4,0,0,0),
                                    (3,0,0,0),
                                    (-3,0,0,0),
                                    (-3,0,0,0),
                                    (-3,0,0,0),
                                    (-3,0,0,0),
                                    (-3,0,0,0),
                                    (-3,0,0,0),
                                    (-3,0,0,0)
                                );

//////////////////////////////////////////////////////////
// Hasta aqui la declaracion de variables y constantes ///
//////////////////////////////////////////////////////////

function rad2deg(radians: double): double;
begin
    result := (180/PI)*radians;
end;

function deg2rad(degrees: double): double ;
begin
    result := (PI/180)*degrees;
end;

function limit_degrees(degrees: double): double;
var
    limited: double;
begin
    degrees := degrees / 360;
    limited := 360*(degrees - floor(degrees));
    if (limited < 0) then
        limited := limited + 360;

    result := limited;
end;

function limit_degrees180pm(degrees: double): double;
var
    limited: double;
begin
    degrees := degrees / 360;
    limited := 360*(degrees - floor(degrees));
    if (limited < -180) then
        limited := limited + 360
    else if (limited >  180) then
        limited := limited - 360;

    result := limited;
end;

function limit_degrees180(degrees: double): double;
var
    limited: double;
begin

    degrees := degrees / 180;
    limited := 180*(degrees - floor(degrees));
    if (limited < 0) then
        limited := limited + 180;

    result := limited;
end;

function limit_zero2one(value: double): double;
var
    limited: double;
begin
    limited := value - floor(value);
    if (limited < 0) then
        limited := limited + 1;

    result := limited;
end;

function dayfrac_to_local_hr(dayfrac: double; timezone: single): double;
begin
    result := 24*limit_zero2one(dayfrac + timezone/24);
end;

function third_order_polynomial(a, b, c, d, x: double): double;
begin
    result := ((a*x + b)*x + c)*x + d;
end;

//function validate_inputs(spa: spa_data): integer;
function validate_inputs: integer;
begin
    if ((spa.year        < -2000) or (spa.year        > 6000)) then result := 1;
    if ((spa.month       < 1    ) or (spa.month       > 12  )) then result := 2;
    if ((spa.day         < 1    ) or (spa.day         > 31  )) then result := 3;
    if ((spa.hour        < 0    ) or (spa.hour        > 24  )) then result := 4;
    if ((spa.minute      < 0    ) or (spa.minute      > 59  )) then result := 5;
    if ((spa.second      < 0    ) or (spa.second      > 59  )) then result := 6;
    if ((spa.pressure    < 0    ) or (spa.pressure    > 5000)) then result := 12;
    if ((spa.temperature <= -273) or (spa.temperature > 6000)) then result := 13;
    if ((spa.hour        = 24  ) and (spa.minute      > 0   )) then result := 5;
    if ((spa.hour        = 24  ) and (spa.second      > 0   )) then result := 6;

    if (Abs(spa.delta_t)   > 8000    ) then result := 7;
    if (Abs(spa.timezone)  > 12      ) then result := 8;
    if (Abs(spa.longitude) > 180     ) then result := 9;
    if (Abs(spa.latitude)  > 90      ) then result := 10;
    if (     spa.elevation  < -6500000) then result := 11;

//    if ((spa.function = SPA_ZA_INC) or (spa.function = SPA_ALL))
//    begin
        if (Abs(spa.slope)         > 360) then result := 14;
        if (Abs(spa.azm_rotation)  > 360) then result := 15;
//    end;

//    if ((spa.function == SPA_ZA_RTS) || (spa.function == SPA_ALL))
//    begin
        if (Abs(spa.atmos_refract) > 10 ) then result := 16;
//    end;

    result := 0;
end;

function julian_day(year, month, day, hour, minute, second: integer; tz: single): double;
var
    day_decimal, julian_day, a: double;
begin
    day_decimal := day + (hour - tz + (minute + second / 60) / 60) / 24;

    if (month < 3) then
    begin
        month := month + 12;
        year := year - 1;
    end;

    julian_day := floor(365.25*(year+4716)) + floor(30.6001*(month+1)) + day_decimal - 1524.5;

    if (julian_day > 2299160) then
    begin
        a := floor(year/100);
        julian_day := julian_day + (2 - a + floor(a/4));
    end;

    result := julian_day;
end;

function julian_century(jd: double): double;
begin
    result := (jd - 2451545) / 36525;
end;

function julian_ephemeris_day(jd: double; delta_t: single): double;
begin
    result := jd + delta_t / 86400;
end;

function julian_ephemeris_century(jde: double):double;
begin
    result := (jde - 2451545)/36525;
end;

function julian_ephemeris_millennium(jce: double):double;
begin
    result := (jce/10);
end;

{***** ORIGINAL *****
function earth_periodic_term_summation(const terms: double_array; ind_terms, count: integer; jme: double): double;
var
    i: integer;
    sum: double;
begin
    sum := 0;

    for i := 0 to count-1 do
        sum := sum + terms[ind_terms,i,Ord(TERM_A)] * cos(terms[ind_terms,i,Ord(TERM_B)] + terms[ind_terms,i,Ord(TERM_C)] * jme);

    earth_periodic_term_summation := sum;
end;
}

function earth_periodic_term_summation_R_TERMS(const terms: ARRAY_R_TERMS; ind_terms, count: integer; jme: double): double;
var
    i: integer;
    sum: double;
begin
    sum := 0;
    for i := 0 to count-1 do
        sum := sum + terms[ind_terms,i,Ord(TERM_A)] * cos(terms[ind_terms,i,Ord(TERM_B)] + terms[ind_terms,i,Ord(TERM_C)] * jme);
    result := sum;
end;

function earth_periodic_term_summation_L_TERMS(const terms: ARRAY_L_TERMS; ind_terms, count: integer; jme: double): double;
var
    i: integer;
    sum: double;
begin
    sum := 0;
    for i := 0 to count-1 do
        sum := sum + terms[ind_terms,i,Ord(TERM_A)] * cos(terms[ind_terms,i,Ord(TERM_B)] + terms[ind_terms,i,Ord(TERM_C)] * jme);
    result := sum;
end;

function earth_periodic_term_summation_B_TERMS(const terms: ARRAY_B_TERMS; ind_terms, count: integer; jme: double): double;
var
    i: integer;
    sum: double;
begin
    sum := 0;
    for i := 0 to count-1 do
        sum := sum + terms[ind_terms,i,Ord(TERM_A)] * cos(terms[ind_terms,i,Ord(TERM_B)] + terms[ind_terms,i,Ord(TERM_C)] * jme);
    result := sum;
end;

function earth_values(term_sum: array of double; count: integer; jme: double ): double;
var
    i: integer;
    sum: double;
begin
    sum := 0;

    for i := 0 to count-1 do
        sum := sum + term_sum[i] * Power(jme, i);
    sum := sum / 1e8;

    result := sum;
end;

function earth_heliocentric_longitude(jme: double): double;
var
    sum: array[0..L_COUNT-1] of double;
    i: integer;
begin
    for i := 0 to L_COUNT-1 do
        sum[i] := earth_periodic_term_summation_L_TERMS(L_TERMS, i, l_subcount[i], jme);
    result := limit_degrees(rad2deg(earth_values(sum, L_COUNT, jme)));
end;

function earth_heliocentric_latitude(jme: double):double;
var
    sum: array [0..B_COUNT-1] of double;
    i: integer;
begin
    for i := 0 to B_COUNT-1 do
        sum[i] := earth_periodic_term_summation_B_TERMS(B_TERMS, i, b_subcount[i], jme);
    result := rad2deg(earth_values(sum, B_COUNT, jme));
end;

function earth_radius_vector(jme: double):double;
var
    sum: array [0..R_COUNT-1] of double;
    i: integer;
begin
    for i := 0 to R_COUNT-1 do
        sum[i] := earth_periodic_term_summation_R_TERMS(R_TERMS, i, r_subcount[i], jme);
    result := earth_values(sum, R_COUNT, jme);
end;

function geocentric_longitude(l: double):double;
var
    theta: double;
begin
    theta := l + 180;

    if (theta >= 360) then
        theta := theta - 360;

    result := theta;
end;

function geocentric_latitude(b: double):double;
begin
    result := -b;
end;

function mean_elongation_moon_sun(jce: double):double;
begin
    result := third_order_polynomial(1/189474, -0.0019142, 445267.11148, 297.85036, jce);
end;

function mean_anomaly_sun(jce: double):double;
begin
    result := third_order_polynomial(-1/300000, -0.0001603, 35999.05034, 357.52772, jce);
end;

function mean_anomaly_moon(jce: double):double;
begin
    result := third_order_polynomial(1/56250, 0.0086972, 477198.867398, 134.96298, jce);
end;

function argument_latitude_moon(jce: double):double;
begin
    result := third_order_polynomial(1/327270, -0.0036825, 483202.017538, 93.27191, jce);
end;

function ascending_longitude_moon(jce: double):double;
begin
    result := third_order_polynomial(1/450000.0, 0.0020708, -1934.136261, 125.04452, jce);
end;


//function xy_term_summation(int i, double x[TERM_X_COUNT]):double;
function xy_term_summation(I: integer; x: array of double):double;
var
    J, k: integer;
    sum: double;
begin
    sum := 0;

    for J := 0 to TERM_Y_COUNT do
        sum := sum + x[J] * Y_TERMS[I,J];

    result := sum;
end;

//procedure nutation_longitude_and_obliquity(jce: double; x: array of double; del_psi, del_epsilon: double);
procedure nutation_longitude_and_obliquity(jce: double; x: array of double; sel_spa: boolean);
var
    i: integer;
    xy_term_sum, sum_psi, sum_epsilon: double;
begin
    sum_psi := 0;
    sum_epsilon := 0;

    for i := 0 to Y_COUNT do
    begin
        xy_term_sum  := deg2rad(xy_term_summation(i, x));
        sum_psi := sum_psi + (PE_TERMS[i, Ord(TERM_PSI_A)] + jce*PE_TERMS[i, Ord(TERM_PSI_B)])*sin(xy_term_sum);
        sum_epsilon := sum_epsilon + (PE_TERMS[i, Ord(TERM_EPS_C)] + jce*PE_TERMS[i, Ord(TERM_EPS_D)])*cos(xy_term_sum);
    end;

//    del_psi     := sum_psi     / 36000000;
//    del_epsilon := sum_epsilon / 36000000;

    if sel_spa then
    begin
        spa.del_psi     := sum_psi     / 36000000;
        spa.del_epsilon := sum_epsilon / 36000000;
    end
    else
    begin
        sun_rts.del_psi     := sum_psi     / 36000000;
        sun_rts.del_epsilon := sum_epsilon / 36000000;
    end;
end;


function ecliptic_mean_obliquity(jme: double): double;
var
    u: double;
begin
    u := jme/10;

    result := 84381.448 + u*(-4680.96 + u*(-1.55 + u*(1999.25 + u*(-51.38 + u*(-249.67 +
                       u*(  -39.05 + u*( 7.12 + u*(  27.87 + u*(  5.79 + u*2.45)))))))));
end;

function ecliptic_true_obliquity(delta_epsilon, epsilon0: double): double;
begin
    result := delta_epsilon + epsilon0/3600;
end;

function aberration_correction(r: double): double;
begin
    result := -20.4898 / (3600*r);
end;

function apparent_sun_longitude(theta, delta_psi, delta_tau: double): double;
begin
    result := theta + delta_psi + delta_tau;
end;

function greenwich_mean_sidereal_time (jd, jc: double): double;
begin
    result := limit_degrees(280.46061837 + 360.98564736629 * (jd - 2451545.0) +
                                       jc*jc*(0.000387933 - jc/38710000.0));
end;

function greenwich_sidereal_time (nu0, delta_psi, epsilon: double): double;
begin
    result := nu0 + delta_psi*cos(deg2rad(epsilon));
end;

function geocentric_sun_right_ascension(lamda, epsilon, beta: double): double;
var
    lamda_rad, epsilon_rad: double;
begin
    lamda_rad   := deg2rad(lamda);
    epsilon_rad := deg2rad(epsilon);

    result := limit_degrees(rad2deg(ArcTan2(sin(lamda_rad)*cos(epsilon_rad) -
                                       tan(deg2rad(beta))*sin(epsilon_rad), cos(lamda_rad))));
end;

function geocentric_sun_declination(beta, epsilon, lamda: double): double;
var
    beta_rad, epsilon_rad: double;
begin
    beta_rad    := deg2rad(beta);
    epsilon_rad := deg2rad(epsilon);

    result := rad2deg(ArcSin(sin(beta_rad)*cos(epsilon_rad) +
                        cos(beta_rad)*sin(epsilon_rad)*sin(deg2rad(lamda))));
end;

function observer_hour_angle(nu: double; longitude: single; alpha_deg: double): double;
begin
    result := nu + longitude - alpha_deg;
end;

function sun_equatorial_horizontal_parallax(r: double): double;
begin
    result := 8.794 / (3600 * r);
end;

//procedure sun_right_ascension_parallax_and_topocentric_dec(latitude, elevation: single; xi,
//                                h, delta, delta_alpha, delta_prime: double);
procedure sun_right_ascension_parallax_and_topocentric_dec(latitude, elevation: single; xi,
                                h, delta: double);
var
    lat_rad, xi_rad, h_rad, delta_rad, u, x, y: double;
begin
    lat_rad   := deg2rad(latitude);
    xi_rad    := deg2rad(xi);
    h_rad     := deg2rad(h);
    delta_rad := deg2rad(delta);
    u := ArcTan(0.99664719 * tan(lat_rad));
    y := 0.99664717 * sin(u) + elevation*sin(lat_rad)/6378140;
    x :=              cos(u) + elevation*cos(lat_rad)/6378140;

    spa.del_alpha := rad2deg(ArcTan2(-x*sin(xi_rad)*sin(h_rad), cos(delta_rad) -
                                  x*sin(xi_rad)*cos(h_rad)));

    spa.delta_prime := rad2deg(ArcTan2((sin(delta_rad) - y*sin(xi_rad))*cos( spa.del_alpha),
                                  cos(delta_rad) - x*sin(xi_rad) *cos(h_rad)));
end;


function topocentric_sun_right_ascension(alpha_deg, delta_alpha: double): double;
begin
    result := alpha_deg + delta_alpha;
end;

function topocentric_local_hour_angle(h, delta_alpha: double): double;
begin
    result := h - delta_alpha;
end;

function topocentric_elevation_angle(latitude: single; delta_prime, h_prime: double): double;
var
    lat_rad, delta_prime_rad: double;
begin
    lat_rad         := deg2rad(latitude);
    delta_prime_rad := deg2rad(delta_prime);

    result := rad2deg(ArcSin(sin(lat_rad)*sin(delta_prime_rad) +
                        cos(lat_rad)*cos(delta_prime_rad) * cos(deg2rad(h_prime))));
end;

function atmospheric_refraction_correction(pressure, temperature: single; e0: double): double;
begin
    result := (pressure / 1010) * (283 / (273 + temperature)) *
            1.02 / (60 * tan(deg2rad(e0 + 10.3/(e0 + 5.11))));
end;

function topocentric_elevation_angle_corrected(e0, delta_e: double): double;
begin
    result := e0 + delta_e;
end;

function topocentric_zenith_angle(e: double): double;
begin
    result := 90 - e;
end;

function topocentric_azimuth_angle_neg180_180(h_prime: double; latitude: single; delta_prime: double): double;
var
    h_prime_rad, lat_rad: double;
begin
    h_prime_rad := deg2rad(h_prime);
    lat_rad     := deg2rad(latitude);

    result := rad2deg(ArcTan2(sin(h_prime_rad),
                         cos(h_prime_rad)*sin(lat_rad) - tan(deg2rad(delta_prime))*cos(lat_rad)));
end;

function topocentric_azimuth_angle_zero_360(azimuth180: double): double;
begin
    result := azimuth180 + 180;
end;

function surface_incidence_angle(zenith, azimuth180: double; azm_rotation, slope: single): double;
var
    zenith_rad, slope_rad: double;
begin
    zenith_rad := deg2rad(zenith);
    slope_rad  := deg2rad(slope);

    result := rad2deg(ArcCos(cos(zenith_rad)*cos(slope_rad)  +
                        sin(slope_rad )*sin(zenith_rad) * cos(deg2rad(azimuth180 - azm_rotation))));
end;

function sun_mean_longitude(jme: double): double;
begin
    result := limit_degrees(280.4664567 + jme*(360007.6982779 + jme*(0.03032028 +
                    jme*(1/49931   + jme*(-1/15300     + jme*(-1/2000000))))));
end;

function eot(m, alpha, del_psi, epsilon: double): double;
begin
    result := 4*(m - 0.0057183 - alpha + del_psi*cos(deg2rad(epsilon)));
end;

function approx_sun_transit_time(alpha_zero: double; longitude: single; nu: double): double;
begin
    result := (alpha_zero - longitude - nu) / 360;
end;

function sun_hour_angle_at_rise_set(latitude: single; delta_zero, h0_prime: double): double;
var
    h0, latitude_rad, delta_zero_rad, argument: double;
begin
    h0             := -99999;
    latitude_rad   := deg2rad(latitude);
    delta_zero_rad := deg2rad(delta_zero);
    argument       := (sin(deg2rad(h0_prime)) - sin(latitude_rad)*sin(delta_zero_rad)) /
                                                    (cos(latitude_rad)*cos(delta_zero_rad));

    if (Abs(argument) <= 1) then
        h0 := limit_degrees180(rad2deg(ArcCos(argument)));

    result := h0;
end;

procedure approx_sun_rise_and_set(h0: double);
var
    h0_dfrac: double;
begin
    h0_dfrac := h0/360;

    m_rts[Ord(SUN_RISE)]    := limit_zero2one(m_rts[Ord(SUN_TRANSIT)] - h0_dfrac);
    m_rts[Ord(SUN_SET)]     := limit_zero2one(m_rts[Ord(SUN_TRANSIT)] + h0_dfrac);
    m_rts[Ord(SUN_TRANSIT)] := limit_zero2one(m_rts[Ord(SUN_TRANSIT)]);
end;

//function rts_alpha_delta_prime(ad: double_array; n: double): double;
function rts_alpha_delta_prime(ad: alpha_delta_array; n: double): double;
var
    a, b: double;
begin
    a := ad[Ord(JD_ZERO)] - ad[Ord(JD_MINUS)];
    b := ad[Ord(JD_PLUS)] - ad[Ord(JD_ZERO)];

    if (Abs(a) >= 2) then a := limit_zero2one(a);
    if (Abs(b) >= 2) then b := limit_zero2one(b);

    result := ad[Ord(JD_ZERO)] + n * (a + b + (b-a)*n)/2;
end;

function rts_sun_altitude(latitude, delta_prime, h_prime: double): double;
var
    latitude_rad, delta_prime_rad: double;

begin
    latitude_rad    := deg2rad(latitude);
    delta_prime_rad := deg2rad(delta_prime);

    result := rad2deg(ArcSin(sin(latitude_rad)*sin(delta_prime_rad) +
                        cos(latitude_rad)*cos(delta_prime_rad)*cos(deg2rad(h_prime))));
end;

function sun_rise_and_set(m_rts, h_rts, delta_prime: alpha_delta_array; latitude: double; h_prime: alpha_delta_array; h0_prime: double; sun: integer): double;
begin
    result := m_rts[sun] + (h_rts[sun] - h0_prime) /
          (360*cos(deg2rad(delta_prime[sun]))*cos(deg2rad(latitude))*sin(deg2rad(h_prime[sun])));
end;

////////////////////////////////////////////////////////////////////////////////////////////////
// Calculate required SPA parameters to get the right ascension (alpha) and declination (delta)
// Note: JD must be already calculated and in structure
////////////////////////////////////////////////////////////////////////////////////////////////
//procedure calculate_geocentric_sun_right_ascension_and_declination(spa: spa_data);
procedure calculate_geocentric_sun_right_ascension_and_declination;
var
    x: array [0..TERM_X_COUNT] of double;
begin
//    double x[TERM_X_COUNT];

    spa.jc := julian_century(spa.jd);

    spa.jde := julian_ephemeris_day(spa.jd, spa.delta_t);
    spa.jce := julian_ephemeris_century(spa.jde);
    spa.jme := julian_ephemeris_millennium(spa.jce);

    spa.l := earth_heliocentric_longitude(spa.jme);
    spa.b := earth_heliocentric_latitude(spa.jme);
    spa.r := earth_radius_vector(spa.jme);

    spa.theta := geocentric_longitude(spa.l);
    spa.beta  := geocentric_latitude(spa.b);

    x[Ord(TERM_X0)] := mean_elongation_moon_sun(spa.jce);
    x[Ord(TERM_X1)] := mean_anomaly_sun(spa.jce);
    x[Ord(TERM_X2)] := mean_anomaly_moon(spa.jce);
    x[Ord(TERM_X3)] := argument_latitude_moon(spa.jce);
    x[Ord(TERM_X4)] := ascending_longitude_moon(spa.jce);

    spa.x0 := mean_elongation_moon_sun(spa.jce);
    spa.x1 := mean_anomaly_sun(spa.jce);
    spa.x2 := mean_anomaly_moon(spa.jce);
    spa.x3 := argument_latitude_moon(spa.jce);
    spa.x4 := ascending_longitude_moon(spa.jce);

//    nutation_longitude_and_obliquity(spa.jce, x, spa.del_psi, spa.del_epsilon);
    nutation_longitude_and_obliquity(spa.jce, x, True);

    spa.epsilon0 := ecliptic_mean_obliquity(spa.jme);
    spa.epsilon  := ecliptic_true_obliquity(spa.del_epsilon, spa.epsilon0);

    spa.del_tau   := aberration_correction(spa.r);
    spa.lamda     := apparent_sun_longitude(spa.theta, spa.del_psi, spa.del_tau);
    spa.nu0       := greenwich_mean_sidereal_time (spa.jd, spa.jc);
    spa.nu        := greenwich_sidereal_time (spa.nu0, spa.del_psi, spa.epsilon);

    spa.alpha := geocentric_sun_right_ascension(spa.lamda, spa.epsilon, spa.beta);
    spa.delta := geocentric_sun_declination(spa.beta, spa.epsilon, spa.lamda);
end;

//************************************************************
//*****  Agregado por mi para el calculo de sun_rts  *********
//************************************************************
procedure for_sun_rts_calculate_geocentric_sun_right_ascension_and_declination;
var
    x: array [0..TERM_X_COUNT] of double;
begin
//    double x[TERM_X_COUNT];

    sun_rts.jc := julian_century(sun_rts.jd);

    sun_rts.jde := julian_ephemeris_day(sun_rts.jd, sun_rts.delta_t);
    sun_rts.jce := julian_ephemeris_century(sun_rts.jde);
    sun_rts.jme := julian_ephemeris_millennium(sun_rts.jce);

    sun_rts.l := earth_heliocentric_longitude(sun_rts.jme);
    sun_rts.b := earth_heliocentric_latitude(sun_rts.jme);
    sun_rts.r := earth_radius_vector(sun_rts.jme);

    sun_rts.theta := geocentric_longitude(sun_rts.l);
    sun_rts.beta  := geocentric_latitude(sun_rts.b);

    x[Ord(TERM_X0)] := mean_elongation_moon_sun(sun_rts.jce);
    x[Ord(TERM_X1)] := mean_anomaly_sun(sun_rts.jce);
    x[Ord(TERM_X2)] := mean_anomaly_moon(sun_rts.jce);
    x[Ord(TERM_X3)] := argument_latitude_moon(sun_rts.jce);
    x[Ord(TERM_X4)] := ascending_longitude_moon(sun_rts.jce);

    sun_rts.x0 := mean_elongation_moon_sun(sun_rts.jce);
    sun_rts.x1 := mean_anomaly_sun(sun_rts.jce);
    sun_rts.x2 := mean_anomaly_moon(sun_rts.jce);
    sun_rts.x3 := argument_latitude_moon(sun_rts.jce);
    sun_rts.x4 := ascending_longitude_moon(sun_rts.jce);

//    nutation_longitude_and_obliquity(spa.jce, x, spa.del_psi, spa.del_epsilon);
    nutation_longitude_and_obliquity(sun_rts.jce, x, False);

    sun_rts.epsilon0 := ecliptic_mean_obliquity(sun_rts.jme);
    sun_rts.epsilon  := ecliptic_true_obliquity(sun_rts.del_epsilon, sun_rts.epsilon0);

    sun_rts.del_tau   := aberration_correction(sun_rts.r);
    sun_rts.lamda     := apparent_sun_longitude(sun_rts.theta, sun_rts.del_psi, sun_rts.del_tau);
    sun_rts.nu0       := greenwich_mean_sidereal_time (sun_rts.jd, sun_rts.jc);
    sun_rts.nu        := greenwich_sidereal_time (sun_rts.nu0, sun_rts.del_psi, sun_rts.epsilon);

    sun_rts.alpha := geocentric_sun_right_ascension(sun_rts.lamda, sun_rts.epsilon, sun_rts.beta);
    sun_rts.delta := geocentric_sun_declination(sun_rts.beta, sun_rts.epsilon, sun_rts.lamda);
end;



////////////////////////////////////////////////////////////////////////
// Calculate Equation of Time (EOT) and Sun Rise, Transit, & Set (RTS)
////////////////////////////////////////////////////////////////////////


//procedure calculate_eot_and_sun_rise_transit_set(spa: spa_data);
procedure calculate_eot_and_sun_rise_transit_set;
//type
//    alpha_delta_array = array [0..JD_COUNT] of double;
//    double_array2 = array [0..SUN_COUNT] of double;
var
//    sun_rts: spa_data;
    nu, m, h0, n, h0_prime: double;
    //alpha, delta: double_array1;
    alpha, delta: alpha_delta_array;
//    nu_rts, h_rts, alpha_prime, delta_prime, h_prime: double_array;
    nu_rts, h_rts, alpha_prime, delta_prime, h_prime: alpha_delta_array;
    I: integer;
//    m_rts: double_array;
begin
    sun_rts := spa;
    h0_prime := -1*(SUN_RADIUS + spa.atmos_refract);

    m       := sun_mean_longitude(spa.jme);
    spa.eot := eot(m, spa.alpha, spa.del_psi, spa.epsilon);

    sun_rts.hour := 0;
    sun_rts.minute := 0;
    sun_rts.second := 0;
    sun_rts.timezone := 0;

    sun_rts.jd := julian_day (sun_rts.year, sun_rts.month,  sun_rts.day,
                             sun_rts.hour, sun_rts.minute, sun_rts.second, sun_rts.timezone);

//    calculate_geocentric_sun_right_ascension_and_declination(sun_rts);
    for_sun_rts_calculate_geocentric_sun_right_ascension_and_declination;
    nu := sun_rts.nu;

    sun_rts.delta_t := 0;
    sun_rts.jd := sun_rts.jd - 1;
//    for I:=0 to JD_COUNT do
    for I:=0 to JD_COUNT do
    begin
//        calculate_geocentric_sun_right_ascension_and_declination(sun_rts);
        for_sun_rts_calculate_geocentric_sun_right_ascension_and_declination;
        alpha[I] := sun_rts.alpha;
        delta[I] := sun_rts.delta;
        sun_rts.jd := sun_rts.jd + 1;
    end;

    m_rts[Ord(SUN_TRANSIT)] := approx_sun_transit_time(alpha[Ord(JD_ZERO)], spa.longitude, nu);
    h0 := sun_hour_angle_at_rise_set(spa.latitude, delta[Ord(JD_ZERO)], h0_prime);

    if (h0 >= 0) then
    begin
        approx_sun_rise_and_set(h0);
        //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
        //&&&&&&&& A Q U I   M E    Q U E D E  &&&&&&&&&&&&&&&&&&&&&&&&
        //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
        for I:=0 to SUN_COUNT do
        begin
            nu_rts[I]      := nu + 360.985647 * m_rts[I];
            n              := m_rts[i] + spa.delta_t / 86400;
            alpha_prime[I] := rts_alpha_delta_prime(alpha, n);
            delta_prime[I] := rts_alpha_delta_prime(delta, n);

            h_prime[I]     := limit_degrees180pm(nu_rts[I] + spa.longitude - alpha_prime[I]);

            h_rts[I]       := rts_sun_altitude(spa.latitude, delta_prime[I], h_prime[I]);
        end;

        spa.srha := h_prime[Ord(SUN_RISE)];
        spa.ssha := h_prime[Ord(SUN_SET)];
        spa.sta  := h_rts[Ord(SUN_TRANSIT)];

        spa.suntransit := dayfrac_to_local_hr(m_rts[Ord(SUN_TRANSIT)] - h_prime[Ord(SUN_TRANSIT)] / 360.0,
                                              spa.timezone);

        spa.sunrise := dayfrac_to_local_hr(sun_rise_and_set(m_rts, h_rts, delta_prime,
                          spa.latitude, h_prime, h0_prime, Ord(SUN_RISE)), spa.timezone);

        spa.sunset  := dayfrac_to_local_hr(sun_rise_and_set(m_rts, h_rts, delta_prime,
                          spa.latitude, h_prime, h0_prime, Ord(SUN_SET)),  spa.timezone);

    end
    else
    begin
        spa.srha := -99999;
        spa.ssha := -99999;
        spa.sta := -99999;
        spa.suntransit := -99999;
        spa.sunrise := -99999;
        spa.sunset := -99999;
    end;
end;

///////////////////////////////////////////////////////////////////////////////////////////
// Calculate all SPA parameters and put into structure
// Note: All inputs values (listed in header file) must already be in structure
///////////////////////////////////////////////////////////////////////////////////////////
//function spa_calculate(spa: spa_data): integer;
function spa_calculate( in_year, in_month, in_day, in_hour,
                        in_minute, in_second: word;
                        in_delta_t, in_timezone, in_longitude,
                        in_latitude, in_elevation, in_pressure,
                        in_temperature, in_slope,
                        in_azm_rotation,
                        in_atmos_refract: single): integer;
var
    result_error: integer;
begin
    spa.year          := in_year;
    spa.month         := in_month;
    spa.day           := in_day;
    spa.hour          := in_hour;
    spa.minute        := in_minute;
    spa.second        := in_second;
    spa.timezone      := in_timezone;
    spa.delta_t       := in_delta_t;
    spa.longitude     := in_longitude;
    spa.latitude      := in_latitude;
    spa.elevation     := in_elevation;
    spa.pressure      := in_pressure;
    spa.temperature   := in_temperature;
    spa.slope         := in_slope;
    spa.azm_rotation  := in_azm_rotation;
    spa.atmos_refract := in_atmos_refract;

    result_error := validate_inputs;

    if (result_error = 0) then
    begin
        spa.jd := julian_day (spa.year, spa.month,  spa.day,
                              spa.hour, spa.minute, spa.second, spa.timezone);
        calculate_geocentric_sun_right_ascension_and_declination;
        spa.h  := observer_hour_angle(spa.nu, spa.longitude, spa.alpha);
        spa.xi := sun_equatorial_horizontal_parallax(spa.r);

        sun_right_ascension_parallax_and_topocentric_dec(spa.latitude, spa.elevation, spa.xi,
                                    spa.h, spa.delta);

        spa.alpha_prime := topocentric_sun_right_ascension(spa.alpha, spa.del_alpha);
        spa.h_prime     := topocentric_local_hour_angle(spa.h, spa.del_alpha);

        spa.e0          := topocentric_elevation_angle(spa.latitude, spa.delta_prime, spa.h_prime);
        spa.del_e       := atmospheric_refraction_correction(spa.pressure, spa.temperature, spa.e0);
        spa.e           := topocentric_elevation_angle_corrected(spa.e0, spa.del_e);
        spa.zenith      := topocentric_zenith_angle(spa.e);
        spa.azimuth180  := topocentric_azimuth_angle_neg180_180(spa.h_prime, spa.latitude,
                                                                             spa.delta_prime);
        spa.azimuth     := topocentric_azimuth_angle_zero_360(spa.azimuth180);
        spa.incidence   := surface_incidence_angle(spa.zenith, spa.azimuth180,
                                                  spa.azm_rotation, spa.slope);
        calculate_eot_and_sun_rise_transit_set;
    end;

    out_ho := spa.e0;
    out_seno_ho := sin((spa.e0 * PI)/180);
    out_eot := spa.eot;
    out_delta := spa.delta;

    result := result_error;
end;


{
procedure TForm1.FormActivate(Sender: TObject);
var
    a: string;
begin
    tg := Now;
    a := TimeToStr(tg);
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
    DateSeparator := '/';
    ShortDateFormat := 'd/m/yyyy';
    TimeSeparator := ':';
    ShortTimeFormat := 'HH:mm';
end;

procedure TForm1.Button3Click(Sender: TObject);
var
    tmp, c: double;
    result_spa: integer;
    min, sec: single;
    di,ti: TDateTime;
    a,b: string;
    ms: word;
begin

    //tmp := earth_heliocentric_longitude(0.00379278199229336);
    //Label10.Caption := FloatToStr(tmp);
    ////////////////////////////////////////////////////////
    ////////////      Para comprobacion     ////////////////
    ////////////////////////////////////////////////////////

    spa.year          := 2003;
    spa.month         := 10;
    spa.day           := 17;
    spa.hour          := 12;
    spa.minute        := 30;
    spa.second        := 30;
    spa.timezone      := -7.0;
    spa.delta_t       := 67;
    spa.longitude     := -105.1786;
    spa.latitude      := 39.742476;
    spa.elevation     := 1830.14;
    spa.pressure      := 820;
    spa.temperature   := 11;
    spa.slope         := 30;
    spa.azm_rotation  := -10;
    spa.atmos_refract := 0.5667;


    a := me_date.Text;
    if (a = '  /  /    ') then
    begin
        ShowMessage('Falta Fecha');
        exit;
    end;
    di := StrToDate(a);
    DecodeDate(di,spa.year,spa.month,spa.day);

    b := me_time.Text + ':00';
    if (b = '  :  :00') then
    begin
        ShowMessage('Falta Hora');
        exit;
    end;
    ti := StrToTime(b);
    DecodeTime(ti,spa.hour,spa.minute,spa.second,ms);

    spa.delta_t := StrToFloat(e_dt.Text);

    spa.slope         := 0;
    spa.azm_rotation  := 0;
    spa.atmos_refract := 0;

    spa.timezone      := -5.0;
    spa.longitude     := -77.871;
    spa.latitude      := 21.421;
    spa.elevation     := 120;
    spa.pressure      := 1015.2;
    spa.temperature   := 24.7;



    result_spa := spa_calculate;

    if (result_spa = 0) then  //check for SPA errors
    begin

              //display the results inside the SPA structure
        Memo1.Lines.Add('');
        Memo1.Lines.Add(Format('Fecha: %2d/%2d/%4d       Hora: %2d:%2d:%2d',[spa.day, spa.month, spa.year, spa.hour, spa.minute, spa.second]));
        Memo1.Lines.Add(Format('Julian Day:    %.6f',[spa.jd]));
        Memo1.Lines.Add(Format('L:             %.6e degrees',[spa.l]));
        Memo1.Lines.Add(Format('B:             %.6e degrees',[spa.b]));
        Memo1.Lines.Add(Format('R:             %.6f AU',[spa.r]));
        Memo1.Lines.Add(Format('H:             %.6f degrees',[spa.h]));
        Memo1.Lines.Add(Format('Delta Psi:     %.6e degrees',[spa.del_psi]));
        Memo1.Lines.Add(Format('Delta Epsilon: %.6e degrees',[spa.del_epsilon]));
        Memo1.Lines.Add(Format('Epsilon:       %.6f degrees',[spa.epsilon]));
        Memo1.Lines.Add(Format('Zenith:        %.6f degrees',[spa.zenith]));
        Memo1.Lines.Add(Format('Azimuth:       %.6f degrees',[spa.azimuth]));
        Memo1.Lines.Add(Format('Incidence:     %.6f degrees',[spa.incidence]));
        Memo1.Lines.Add(Format('Delta Tau      %.6f degrees',[spa.del_tau]));
              min := 60 * (spa.sunrise - Int(spa.sunrise));
              sec := 60 * (min - Int(min));
        Memo1.Lines.Add(Format('Sunrise:       %2.0f:%2.0f:%2.0f Local Time', [Int(spa.sunrise), Int(min), Int(sec)]));
              min := 60 * (spa.sunset - Int(spa.sunset));
              sec := 60 * (min - Int(min));
        Memo1.Lines.Add(Format('Sunset:        %2.0f:%2.0f:%2.0f Local Time', [Int(spa.sunset), Int(min), Int(sec)]));
        Memo1.Lines.Add('');
        Memo1.Lines.Add('');
        Memo1.Lines.Add('');
        c := 0;
        Memo1.Lines.Add('*** Altura del sol sin correcion ***');
        Memo1.Lines.Add(Format('Angulo de elevacion topocentrico:                     =%10.5f',[spa.e0]));
        c := sin((spa.e0 * PI)/180);
        Memo1.Lines.Add(Format('Seno del angulo de elevacion topocentrico:            =%10.5f',[c]));
        Memo1.Lines.Add('');
        Memo1.Lines.Add('');
        c := 0;
        Memo1.Lines.Add('*** Altura del sol corregido por refraccion ***');
        Memo1.Lines.Add(Format('Angulo de elevacion topocentrico corregido:           =%10.5f',[spa.e]));
        c := sin((spa.e * PI)/180);
        Memo1.Lines.Add(Format('Seno del angulo de elevacion topocentrico corregido:  =%10.5f',[c]));
        Memo1.Lines.Add('');
    end
    else
        ShowMessage(Format('SPA Error Code: %d', [result_spa]));
end;


/////////////////////////////////////////////
// The output of this program should be:   //
//                                         //
//Julian Day:    2452930.312847            //
//L:             2.401826e+01 degrees      //
//B:             -1.011219e-04 degrees     //
//R:             0.996542 AU               //
//H:             11.105904 degrees         //
//Delta Psi:     -3.998404e-03 degrees     //
//Delta Epsilon: 1.666568e-03 degrees      //
//Epsilon:       23.440465 degrees         //
//Zenith:        50.111624 degrees         //
//Azimuth:       194.340242 degrees        //
//Incidence:     25.187002 degrees         //
//Sunrise:       06:12:43 Local Time       //
//Sunset:        17:20:19 Local Time       //
//                                         //
/////////////////////////////////////////////
}
end.
