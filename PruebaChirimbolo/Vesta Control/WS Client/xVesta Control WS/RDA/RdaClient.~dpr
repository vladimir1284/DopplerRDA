program RdaClient;

uses
  Windows,
  Forms,
  FrameMotor in 'Components\FrameMotor.pas' {Frame_Motor: TFrame},
  FrameTxRx in 'Components\FrameTxRx.pas' {Frame_TxRx: TFrame},
  FrameRadar in 'Components\FrameRadar.pas' {Frame_Radar: TFrame},
  FrameAntenna in 'Components\FrameAntenna.pas' {Frame_Antenna: TFrame},
  FrameSynchro in 'Components\FrameSynchro.pas' {Frame_Synchro: TFrame},
  FrameObservations in 'Components\FrameObservations.pas' {Frame_Observations: TFrame},
  EditTemplate in 'Components\EditTemplate.pas' {Edit_Template},
  EditFormat in 'Components\EditFormat.pas' {Edit_Format},
  FrameAdmin in 'Components\FrameAdmin.pas' {Frame_Admin: TFrame},
  FrameVideo in 'Components\FrameVideo.pas' {Frame_Video: TFrame},
  FrameTxRxCalib in 'Components\FrameTxRxCalib.pas' {Frame_TxRx_Calibration: TFrame},
  FrameCalibration in 'Components\FrameCalibration.pas' {Frame_Calibration: TFrame},
  FrameConfiguration in 'Components\FrameConfiguration.pas' {Frame_Configuration: TFrame},
  FrameObservation in 'Components\FrameObservation.pas' {Frame_Observation: TFrame},
  LoginDialog in 'Modules\LoginDialog.pas' {FLogin},
  MotorCalib in 'Components\MotorCalib.pas' {MotorCalib_Dialog},
  AboutDialog in '..\General\AboutDialog.pas' {FAboutDialog},
  WaitDialog in 'Modules\WaitDialog.pas' {FWait},
  DirList in '..\General\DirList.pas' {DirectoryList},
  RdaMessages in '..\General\RdaMessages.pas',
  FrameSunPosition in 'Components\FrameSunPosition.pas' {Frame_SunPosition: TFrame},
  FrameLogs in 'Components\FrameLogs.pas' {Frame_Logs: TFrame},
  Constants in '..\General\Constants.pas',
  EditFTPSettings in 'Components\EditFTPSettings.pas' {FTPSettings},
  Shell_Client in 'Modules\Shell_Client.pas' {ShellClient},
  FrameControl in 'Components\FrameControl.pas' {Frame_Control: TFrame},
  RTConfiguration in 'Client\RTConfiguration.pas',
  EditUser in 'Components\EditUser.pas' {Edit_User},
  LogBoard in 'Components\LogBoard.pas' {LogScreen},
  PlotForm in 'Components\PlotForm.pas' {RxPlotForm},
  FrameStatistics in 'Components\FrameStatistics.pas' {Frame_Statistics: TFrame},
  AntennaWS in 'Communication\AntennaWS.pas',
  MotorWS in 'Communication\MotorWS.pas',
  RadarWS in 'Communication\RadarWS.pas',
  LoginWS in 'Communication\LoginWS.pas',
  AZMotorWS in 'Communication\AZMotorWS.pas',
  ELMotorWS in 'Communication\ELMotorWS.pas',
  CommonObjs in 'Communication\CommonObjs.pas',
  ObservationsWS in 'Communication\ObservationsWS.pas',
  TxRxChWS in 'Communication\TxRxChWS.pas',
  TxRxCh1WS in 'Communication\TxRxCh1WS.pas',
  TxRxCh2WS in 'Communication\TxRxCh2WS.pas',
  TxsRxsWS in 'Communication\TxsRxsWS.pas',
  VideoWS in 'Communication\VideoWS.pas',
  StatisticsWS in 'Communication\StatisticsWS.pas',
  LogWS in 'Communication\LogWS.pas',
  ConfigurationWS in 'Communication\ConfigurationWS.pas',
  VestaWS in 'Communication\VestaWS.pas',
  CalibrationCH1WS in 'Communication\CalibrationCH1WS.pas',
  CalibrationWS in 'Communication\CalibrationWS.pas',
  CalibrationCH2WS in 'Communication\CalibrationCH2WS.pas',
  CommManager in 'Communication\CommManager.pas',
  VideoDataReceiver in 'Communication\VideoDataReceiver.pas';

{$R *.RES}

var
  OnlyOneClient : THandle;

begin
  Application.Initialize;
  Application.Title := 'Cliente RDA';
  Application.CreateForm(TShellClient, ShellClient);
  OnlyOneClient := CreateMutex( nil, true, OnlyOneRdaClientName );
  try
    if false and (GetLastError = ERROR_ALREADY_EXISTS)
      then
        begin
          Application.MessageBox('Ya se esta ejecutando un cliente.'#13#10#13#10 +
                                 'Por favor, utilice el que esta en uso o cierre'#13#10 +
                                 'el mismo antes de intentar utilizar otro.',
                                 'Fallo de ejecucion', MB_ICONSTOP);
          Application.Terminate;
        end
      else
        begin
          with Application.MainForm as TShellClient do
            if Initialize
              then
                begin
                  ShellClient.Timer1.Enabled := true;
                  ShellClient.RT_Timer.Enabled := true;
                end
              else Close;
          Application.Run;
        end;  
  finally
    ReleaseMutex( OnlyOneClient );
  end;
end.

