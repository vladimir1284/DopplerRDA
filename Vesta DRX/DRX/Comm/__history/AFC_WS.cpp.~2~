#include <stdio.h>
#include <vcl.h>
#pragma hdrstop

#if !defined(__AFC_WS_h__)
#include "AFC_WS.h"
#endif

// ************************************************************************ //
//  TAFC_WSImpl implements interface IAFC_WS
// ************************************************************************ //
class TAFC_WSImpl : public TInvokableClass, public IAFC_WS
{
public:
	void   Set_STALO_Output(bool state);
	bool   Get_STALO_Output();
	UINT64 Get_Frequency();
	void   Set_Frequency(UINT64 value);
	double Get_Power();
	void   Set_Power(double value);
	double Get_Temperature();
public:
  HRESULT STDMETHODCALLTYPE QueryInterface(const GUID& IID, void **Obj)
						{ return GetInterface(IID, Obj) ? S_OK : E_NOINTERFACE; }
  ULONG STDMETHODCALLTYPE AddRef() { return TInvokableClass::_AddRef();  }
  ULONG STDMETHODCALLTYPE Release() { return TInvokableClass::_Release();  }
};

void   TAFC_WSImpl::Set_STALO_Output(bool state){
}

bool   TAFC_WSImpl::Get_STALO_Output(){
}

UINT64 TAFC_WSImpl::Get_Frequency(){
}

void   TAFC_WSImpl::Set_Frequency(UINT64 value){
}

double TAFC_WSImpl::Get_Power(){
}

void   TAFC_WSImpl::Set_Power(double value){
}

double TAFC_WSImpl::Get_Temperature(){
}

static void __fastcall AFC_WSFactory(System::TObject* &obj)
{
  static _di_IAFC_WS iInstance;
  static TAFC_WSImpl *instance = 0;
  if (!instance)
  {
    instance = new TAFC_WSImpl();
    instance->GetInterface(iInstance);
  }
  obj = instance;
}

static void RegTypes()
{
  InvRegistry()->RegisterInterface(__delphirtti(IAFC_WS));
  InvRegistry()->RegisterInvokableClass(__classid(TAFC_WSImpl), AFC_WSFactory);
}
#pragma startup RegTypes 32

