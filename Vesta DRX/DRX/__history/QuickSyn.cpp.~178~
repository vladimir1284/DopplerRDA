//---------------------------------------------------------------------------
#pragma hdrstop

#include "QuickSyn.h"
#include "Site.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)

static String SetOutputFrequency_Header = "0C";
static String SetOutputPower_Header     = "03";
static String Reset_Header              = "0E";
static String GetId_Header              = "01";
static String GetStatus_Header          = "02";
static String GetFreq_Header            = "04";
static String GetPower_Header           = "0D";
static String GetTemperature_Header     = "10";
static String RFOutput_Header           = "0F";

static String NoData = "nodata";

static String HexDigits[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"};

QuickSyn::QuickSyn(){
	lock = new TCriticalSection();

#ifdef ZylSerialPort
	ComPort = new TZylSerialPort(NULL);
#endif
}

QuickSyn::~QuickSyn(){
	Disconnect();
#ifdef ZylSerialPort
	ComPort->Free();
#endif
	lock->Free();
}

void QuickSyn::Connect(){
#ifdef ZylSerialPort
	if(!ComPort->IsConnected()){

		ComPort->BaudRate      = Zylserialport::br115200;
		ComPort->DataWidth     = Zylserialport::dw8Bits;
		ComPort->Parity        = Zylserialport::pbNone;
		ComPort->StopBits      = Zylserialport::sb1Bit;
		ComPort->SwFlowControl = Zylserialport::sfNONE;
 	    ComPort->OnReceive     = OnReceive;

		for(int i=1; i < 10; i++){
			try {
				ComPort->Port = (TCommPort)i;
				ComPort->Open();
			} catch (...) {}
			if(ComPort->IsConnected()){
			   if(Ping()){
				 staloPort = (TCommPort)i;
				 GetId();
				 return;
			   }
			   else{
				 ComPort->Close();
                 Sleep(100);
			   }
			}
		}
		staloPort = spNone;
	}
#endif
}

void QuickSyn::Disconnect(){
#ifdef ZylSerialPort
	ComPort->Close();
#endif
}

bool QuickSyn::SendCommand(String header, String parameter){
#ifdef ZylSerialPort
	lock->Acquire();
	__try {
		try {
			ComPort->SendString(header + parameter);
			return true;
		} catch (...) {
			return false;
		}
	} __finally{
		lock->Release();
	}
#else
	return true;
#endif
}

String QuickSyn::QueryCommand(String header, String parameter){
#ifdef ZylSerialPort
	cmdResult = NoData;
	if(SendCommand(header, parameter)){
		DWORD start = GetTickCount();

		while ((cmdResult == NoData) && (GetTickCount() - start < 3000))
			Sleep(10);

		cmdResult = StringReplace(cmdResult, NoData, "", TReplaceFlags() << rfReplaceAll << rfIgnoreCase);
		cmdResult = StringReplace(cmdResult, "\n", "", TReplaceFlags() << rfReplaceAll << rfIgnoreCase);
		return cmdResult;
	}
	else{
		return "";
	}
#else
	return "";
#endif
}

String QuickSyn::DecToHexString(UINT64 value, short length){
	String result = "";
	int remainder;

	while (value != 0){
		remainder = value % 16;
		value /= 16;
		result = HexDigits[remainder] + result;
	}

	for(int i=result.Length(); i < length; i++)
    	result = "0" + result;

	return result;
}

UINT64 QuickSyn::PowerXY(int base, int exp){
	UINT64 result = 1;
	for(int i=0; i<exp; i++){
    	result *= base;
	}
	return result;
}

int QuickSyn::HexDigit(char hexValue){
	switch (UpCase(hexValue)) {
		case '0': return 0;
		case '1': return 1;
		case '2': return 2;
		case '3': return 3;
		case '4': return 4;
		case '5': return 5;
		case '6': return 6;
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		case 'A': return 10;
		case 'B': return 11;
		case 'C': return 12;
		case 'D': return 13;
		case 'E': return 14;
		case 'F': return 15;
		default: return 0;
	}
}

UINT64 QuickSyn::HexStringToDec(String value, short length){
	char hexDigit;
	UINT64 result = 0;
	for(int i=0; i < length; i++){
		hexDigit = value[value.Length() - i];
		result += HexDigit(hexDigit) * PowerXY(16, i);
	}
	return result;
}

void QuickSyn::Reset(){
	SendCommand(Reset_Header, "");
	Sleep(1000);
}

void QuickSyn::SetFrequency(UINT64 freq){
	if((freq >= 0) && (freq <= 1e10)){
		UINT64 desiredFreq = freq * 1000;
		parameter = DecToHexString(desiredFreq, 12);

		SendCommand(SetOutputFrequency_Header, parameter);
	}
}

void QuickSyn::SetPower(double power){
	if((power <= 20) && (power >= -25)){
		UINT64 desiredPower = abs(power * 10);
		if(power < 0)
			desiredPower |= 0x8000;
		parameter = DecToHexString(desiredPower, 4);

		SendCommand(SetOutputPower_Header, parameter);
	}
}

void QuickSyn::SetOutputON(){
	parameter = "01";
	SendCommand(RFOutput_Header, parameter);
}

void QuickSyn::SetOutputOff(){
	parameter = "00";
	SendCommand(RFOutput_Header, parameter);
}

UINT64 QuickSyn::GetFrequency(){
	String data = QueryCommand(GetFreq_Header, "00000000000000");
	if(data.IsEmpty())
		return 2950e6;
	else{
		UINT64 freq = HexStringToDec(data, 12);
		return freq / 1000;
	}
}

double QuickSyn::GetPower(){
	String data = QueryCommand(GetPower_Header, "000000");
	if(data.IsEmpty())
		return 0;
	else{
		UINT64 power = HexStringToDec(data, 4);
		return (double)power / 10;
	}
}

double QuickSyn::GetTemperature(){
	String data = QueryCommand(GetTemperature_Header, "000000");
	if(data.IsEmpty())
		return 0;
	else{
		UINT64 temp = HexStringToDec(data, 4);
		return (double)temp / 10;
	}
}

void QuickSyn::GetId(){
	String data = QueryCommand(GetId_Header, "000000000000000000000000");
	if(data.IsEmpty()){
		fModel   = "";
		fOption  = "";
		fSoftVer = "";
		fSerial  = "";
	}
	else{
		fModel   = data.SubString(7, 5);
		fOption  = data.SubString(5, 2);
		fSoftVer = data.SubString(3, 2);
		fSerial  = data.SubString(1, 2);
	}
}

bool QuickSyn::Ping(){
	try {
		String data = QueryCommand(GetStatus_Header, "00");
		return !data.IsEmpty();
	} catch (...) {
    	return false;
	}
}

void QuickSyn::GetStatus(){
	String data = QueryCommand(GetStatus_Header, "00");
	if(data.IsEmpty()){
		fExtRef       = false;
		fRF_Unlocked  = false;
		fRef_Unlocked = false;
		fRF_Output    = false;
		fVoltageErr   = false;
		fRefOutput    = false;
		fBlanking     = false;
		fLockRecovery = false;
	}
	else{
		int status = HexStringToDec(data, 2);
		fExtRef       = (status & 1)   != 0;
		fRF_Unlocked  = (status & 2)   != 0;
		fRef_Unlocked = (status & 4)   != 0;
		fRF_Output    = (status & 8)   != 0;
		fVoltageErr   = (status & 16)  != 0;
		fRefOutput    = (status & 32)  != 0;
		fBlanking     = (status & 64)  != 0;
		fLockRecovery = (status & 128) != 0;
	}
}

void __fastcall QuickSyn::OnReceive(TObject *Sender, AnsiString Buffer)
{
	cmdResult = Buffer;
}

bool QuickSyn::GetExtRef(){
	return fExtRef;
}

bool QuickSyn::GetRF_Unlocked(){
	return fRF_Unlocked;
}

bool QuickSyn::GetRef_Unlocked(){
	return fRef_Unlocked;
}

bool QuickSyn::GetRF_Output(){
	return fRF_Output;
}

bool QuickSyn::GetVoltageErr(){
	return fVoltageErr;
}

bool QuickSyn::GetRefOutput(){
	return fRefOutput;
}

bool QuickSyn::GetBlanking(){
	return fBlanking;
}

bool QuickSyn::GetLockRecovery(){
	return fLockRecovery;
}



