//---------------------------------------------------------------------------
#include "Radar.h"
#include "QuickSyn.h"
#include "IntegratedData.h"
#include "DataParameters.h"
#include "FIFOinterface.h"

#pragma hdrstop

#pragma package(smart_init)
//---------------------------------------------------------------------------
__fastcall Radar::Radar(bool CreateSuspended) : TThread(CreateSuspended){
	fGathering     = false;
	CurrentIntAzim = 0;
	CurrentIntElev = 0;
	fAFCChangesInhibited = false;
	fLastError = "";

	Stalo = new QuickSyn();
	Stalo->Connect();
	Stalo->Reset();
	Stalo->GetStatus();

	SetupInterface();
	RequestedPulseMode = LP_MODE;
	CurrentPulseMode = SP_MODE;
	UpdatePulseModeNeeded = false;
	UpdatePulseMode = (int)1 << Code_Sync;

	setRequestedPulseMode(LongPulse);
	setRequestedPRF_Mode(SinglePRF);
	setRequestedPRF_Rate(PRF_Rate_None);
	setRequestedSectorMode(0);
	setRequestedSectorMarkDirection(false);
	setRequestedOutputMode(false);

	SetSyncWord();
}
//---------------------------------------------------------------------------

void Radar::setPulseMode(int value){
	if(!UpdatePulseModeNeeded){
		if(value == LongPulse)
			CurrentPulseMode = LP_MODE;
		else
			CurrentPulseMode = (CurrentPRF_Mode == SinglePRF) ? SP_MODE : CurrentPRF_Rate * 5;
	}
}

void Radar::setRequestedPulseMode(int value){
	if(!UpdatePulseModeNeeded){
		if(value == LongPulse)
			RequestedPulseMode = LP_MODE;
		else
			RequestedPulseMode = (RequestedPRF_Mode == SinglePRF) ? SP_MODE : RequestedPRF_Rate * 5;
	}
}

void Radar::setRequestedPRF_Mode(int value){
	if(!UpdatePulseModeNeeded){
		RequestedPRF_Mode = value;
		if(RequestedPulseMode != LP_MODE)
			RequestedPulseMode = (RequestedPRF_Mode == SinglePRF) ? SP_MODE : RequestedPRF_Rate * 5;
	}
}

void Radar::setRequestedPRF_Rate(int value){
	if(!UpdatePulseModeNeeded){
		RequestedPRF_Rate = value  & 0x3;
		if(RequestedPulseMode != LP_MODE)
			RequestedPulseMode = (RequestedPRF_Mode == SinglePRF) ? SP_MODE : RequestedPRF_Rate * 5;
	}
}

void Radar::setRequestedSectorMode(int value){
	if(!UpdatePulseModeNeeded){
		RequestedSectorMode = value & 0xFF;
	}
}

void Radar::setRequestedOutputMode(bool value){
	if(!UpdatePulseModeNeeded){
		RequestedOutputMode = value;
	}
}

void Radar::setRequestedSectorMarkDirection(bool value){
	if(!UpdatePulseModeNeeded){
		RequestedSectorMarkDirection = value;
	}
}

bool Radar::getSectorDirection(){
	return CurrentSectorMarkDirection;
}

int Radar::getPulseMode(){
	return CurrentPulseMode;
}

int Radar::getPRF_Mode(){
	return CurrentPRF_Mode;
}

int Radar::getPRF_Rate(){
	return CurrentPRF_Rate;
}

int Radar::getSectorMode(){
	return CurrentSectorMode;
}

bool Radar::getOutputMode(){
	return CurrentOutputMode;
}

void Radar::StartSynchChange(){
	UpdatePulseModeNeeded = true;
	RequestedOutputMode = false;
	SetSyncWord();
}

void Radar::FinishSynchChange(){
	RequestedOutputMode = true;
	SetSyncWord();

	CurrentPulseMode           = RequestedPulseMode;
	CurrentPRF_Mode            = RequestedPRF_Mode;
	CurrentPRF_Rate            = RequestedPRF_Rate;
	CurrentSectorMode          = RequestedSectorMode;
	CurrentOutputMode          = RequestedOutputMode;
	CurrentSectorMarkDirection = RequestedSectorMarkDirection;

	ClearDigitalOutputs();
	UpdatePulseModeNeeded = false;
}

void Radar::SetSyncWord(){
	int Sync_Code = (int)1 << Code_Sync;

	int Sync_Data = 0;
	if(RequestedPulseMode != LP_MODE)
		Sync_Data |= (int)1 << Value_Pulse_Length;

	if(RequestedPRF_Mode == DualPRF)
		Sync_Data |= (int)1 << Value_PRF_Mode;

	Sync_Data |= (int)1 << Value_Calibration_Mode;

	Sync_Data |= RequestedPRF_Rate << Value_PRF_Rate;
	Sync_Data |= RequestedSectorMode << Value_Sector_Mode;

	if(RequestedSectorMarkDirection)
		Sync_Data |= (int)1 << Value_Sector_Direction;

	if(RequestedOutputMode)
		Sync_Data |= (int)1 << Value_Sync_Output;

	UpdatePulseMode = Sync_Code | Sync_Data;
	DIOInterface->WriteWord(UpdatePulseMode);
}

//Antena
void Radar::SetCurrentIntAzim(int Value){
	CurrentIntAzim = Value;
}

void Radar::SetCurrentIntElev(int Value){
	CurrentIntElev = Value;
}

int  Radar::GetCurrentIntAzim(){
  return CurrentIntAzim;
}

int  Radar::GetCurrentIntElev(){
	return CurrentIntElev;
}

int Radar::GetCurrentPulseMode(){
	return CurrentPulseMode - (CurrentPulseMode%5);
}

bool Radar::SyncChanged(){
	return RequestedPulseMode != GetCurrentPulseMode();
}

void Radar::ClearDigitalOutputs(){
	DIOInterface->WriteWord(0x00000000);
}

//---------------------------------------------------------------------------

__fastcall Radar::SetupInterface(){
  DIOInterface = new FIFOInterface(FifoB);
  NCOInterface = new FIFOInterface(FifoE);

  Stalo->SetOutputON();

  CurrentSTALOFrequency = Stalo_Frequency;
  SetStaloFrequency(Stalo_Frequency);   // Initalise Stalo to nominal freq.
  SetNCOFrequency(IF);
}

//---------------------------------------------------------------------------
void __fastcall Radar::Execute(){
  ClearDigitalOutputs();

  while(!Terminated){
	if(Settling){
	   /* TODO : quitar comentarios para activar lazo del stalo */
	   /*
	   INT64 StaloFrequency = Stalo->GetFrequency();
	   if(abs(RequestedSTALOFrequency - StaloFrequency) < 100e3){
			Settling = false;
			CurrentSTALOFrequency = StaloFrequency;
	   }
	   */
	   Sleep(500);
       CurrentSTALOFrequency = RequestedSTALOFrequency;
	   Settling = false;
	}
	else{
	   if(FreqUpdateNeeded){
		   OutputStaloFrequencyDemand();
	   }
	}
	Sleep(50);
  }
  Stalo->~QuickSyn();
}
//---------------------------------------------------------------------------

void Radar::SetStaloFrequency(INT64 freq){
  if(!Settling){
	  RequestedSTALOFrequency = freq;
	  FreqUpdateNeeded = true;
  }
}

void Radar::OutputStaloFrequencyDemand(){
  Settling = true;
  FreqUpdateNeeded = false;
  Stalo->SetFrequency(RequestedSTALOFrequency);
};

bool Radar::OutputNCOFrequencyDemand(INT64 MeasuredIF){
	HE_INT32 NCOwordout = 0;
	NCOwordout = (MeasuredIF / CLOCKSPD) * TWOTO32 + 0.5;
	NCOInterface->WriteWord(NCOwordout);
};

INT64 Radar::GetSTALOFrequency(){
   return CurrentSTALOFrequency;
}

INT64 Radar::GetNCOFrequency(){
   return RequestedNCOFrequency;
}

void Radar::SetNCOFrequency(INT64 freq){
  RequestedNCOFrequency = freq;
  OutputNCOFrequencyDemand(RequestedNCOFrequency);
}

void Radar::SetAFCChangesInhibited(bool Value){
   fAFCChangesInhibited = Value;
}

bool Radar::GetAFCChangesInhibited(){
   return fAFCChangesInhibited;
}

bool Radar::StaloChanged(){
	return Settling && !AFCChangesInhibited;
}

bool Radar::GetGathering(){
	return fGathering;
}

void Radar::SetGathering(bool value){
	fGathering = value;
}

String Radar::GetLastError(){
	return fLastError;
}

void Radar::SetLastError(String error){
	fLastError = error;
	Gathering = false;
}

