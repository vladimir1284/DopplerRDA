#include <vcl.h>
#include <string.h>
#pragma hdrstop

#include "RawIQRead.h"
#include "Site.h"
#pragma package(smart_init)

__fastcall RawIQRead::RawIQRead(bool CreateSuspended): TThread(CreateSuspended)
{
  this->Priority  = tpTimeCritical;
  fLock = new TCriticalSection;

  IQReadInterface = new FIFOInterface(FifoD);
  TheRawIQData = new RawPulseData[NRAWPULSESOUT];  //Place to store float converted values
  FlatArray = new short[SPSize * NREAD * NUMBEROFBUFFERS]; //Alloc linear memory chunk

  CurrentOutBuffer   = 0;
  CurrentProcBuffer  = 0;
  BadPulses          = 0;
  Counter            = 0;
  SequenceNumber     = 0;
  CurrentOutputCount = 0;
  LastPulse          = 0;
  OverflowError      = false;

  for(int i = 0; i < NUMBEROFBUFFERS; i++){
	InputBuffer[i] = &FlatArray[SPSize * NREAD * i];  //Partition memory to 2d array
  }

  for(int i = 0; i < NRAWPULSESOUT; i++){
   OutputBufferFull[i] = false;
  }

  for(int i = 0; i < NUMBEROFBUFFERS; i++){
	   InputBufferFull[i] = false;
  }

  Set8087CW(0x133f);
}

//---------------------------------------------------------------------------
void __fastcall RawIQRead::Execute()
{
  unsigned int CurrentBuffer = 0;
  bool WaitForData = false;

  //flush Fifos
  IQReadInterface->ReadVector(FlatArray, NDUMPS * sizeof(myDump[0]) * SPSize);

  while(!Terminated){
	 // Fill NREAD buffers at once.
	 IQReadInterface->StartReadVector(InputBuffer[CurrentBuffer], SPSize * sizeof(InputBuffer[0][0]) * NREAD);

	 while(!IQReadInterface->IsReadComplete()){
		fLock->Acquire();
		__try{
			WaitForData = !PartitionData();
		}
		__finally{
			fLock->Release();
		}

		if(WaitForData){
			IQReadInterface->WaitForReadComplete();
	   	}
	 }

	 InputBufferFull[CurrentBuffer] = true;
	 CurrentBuffer++;
	 CurrentBuffer %= NUMBEROFBUFFERS;
  }
  fLock->Free();
}
//---------------------------------------------------------------------------

bool __fastcall RawIQRead::PartitionData()
{
  //first find data then process then mark.
  int Ndata;

  //Counter marks location along the big buffer
  //But there are sub buffers within the big one
  CurrentProcBuffer = Counter / (SPSize * NREAD);

  /* Need 2 sub-buffers full to account for overlap at ends of one buffer. */
  if( !(InputBufferFull[CurrentProcBuffer] && InputBufferFull[(CurrentProcBuffer + 1) % NUMBEROFBUFFERS]) ){
	 return false;
  }

  int StartCounter = Counter;
  while(!(FlatArray[(Counter) % BIGBUFFERSIZE] == -1  &&  FlatArray[(Counter + 1) % BIGBUFFERSIZE] == 0x7FFF)){
	//Skip along big buffer till we find start of data
	Counter++;
	Counter %= BIGBUFFERSIZE;
	if(Counter == StartCounter)
    	return false;
  }

  if((FlatArray[(Counter + LPSize) % BIGBUFFERSIZE] == -1) && (FlatArray[(Counter + 1 + LPSize) % BIGBUFFERSIZE] == 0x7FFF) ){
	 Ndata = LPSize;
  }
  else if((FlatArray[(Counter + SPSizeDual) % BIGBUFFERSIZE] == -1) && (FlatArray[(Counter + 1 + SPSizeDual) % BIGBUFFERSIZE] == 0x7FFF) ){
			Ndata = SPSizeDual;
	   }
	   else if((FlatArray[(Counter + SPSize) % BIGBUFFERSIZE] == -1) && (FlatArray[(Counter + SPSize + 1) % BIGBUFFERSIZE] == 0x7FFF) ){
				Ndata = SPSize;
			}
			else{
				//If not, fifo has overflowed or something else bad
				//Move along and restart read
				Counter++;
				Counter %= BIGBUFFERSIZE;
				BadPulses++;
				return true;
			}

  //Process data
  TheRawIQData[CurrentOutputCount].NData = (Ndata - 4) / 2;     //NSamples minus headers
  TheRawIQData[CurrentOutputCount].SequenceNumber = SequenceNumber;

  short LowHeader  = FlatArray[(Counter + 2) % BIGBUFFERSIZE];
  short HighHeader = FlatArray[(Counter + 3) % BIGBUFFERSIZE];

  TheRawIQData[CurrentOutputCount].SPMode 	 = (HighHeader >> 15) & 1;
  TheRawIQData[CurrentOutputCount].PRFChange = (HighHeader >> 14) & 1;
  TheRawIQData[CurrentOutputCount].Azimuth   = HighHeader & 0x3FFF;

  TheRawIQData[CurrentOutputCount].PRFRate   = LowHeader >> 14 & 3;
  TheRawIQData[CurrentOutputCount].Elevation = LowHeader & 0x3FFF;

  if(!TheRawIQData[CurrentOutputCount].SPMode){
	TheRawIQData[CurrentOutputCount].PulseMode = LP_MODE;
  }
  else if (TheRawIQData[CurrentOutputCount].PRFRate == PRF_Rate_None){
		 TheRawIQData[CurrentOutputCount].PulseMode = SP_MODE;
	   }
	   else{
		 TheRawIQData[CurrentOutputCount].PulseMode = TheRawIQData[CurrentOutputCount].PRFRate * 5;
	   }

  ThisSite->TheRadar->setPulseMode(TheRawIQData[CurrentOutputCount].PulseMode);
  ThisSite->TheRadar->CurrentAzimut = TheRawIQData[CurrentOutputCount].Azimuth;
  ThisSite->TheRadar->CurrentElevation = TheRawIQData[CurrentOutputCount].Elevation;

  for (int i = 0; i < TheRawIQData[CurrentOutputCount].NData; i++){
	TheRawIQData[CurrentOutputCount].I[i] = FlatArray[(Counter + 5 + 2*i) % BIGBUFFERSIZE];    // 4 and 5 to skip headers
	TheRawIQData[CurrentOutputCount].Q[i] = FlatArray[(Counter + 4 + 2*i) % BIGBUFFERSIZE];
  }

  OutputBufferFull[CurrentOutputCount] = true;
  CurrentOutputCount++;
  CurrentOutputCount %= NRAWPULSESOUT;

  //mark last read buffer as empty

  Counter += Ndata;
  Counter %= BIGBUFFERSIZE;
  SequenceNumber++;

  //Move counter back 1 read block to find block to mark as clean
  int LastBuffer = (Counter + BIGBUFFERSIZE - SPSize * NREAD) % BIGBUFFERSIZE;
  LastBuffer /= (SPSize * NREAD);   //Divide by size of reads to get buffer number
  InputBufferFull[LastBuffer] = false;
  memset(InputBuffer[LastBuffer], 0, SPSize * sizeof(InputBuffer[0][0]) * NREAD);

  if(OutputBufferFull[CurrentOutputCount]){
	  OverflowError = true;
  }

  return true;
}

void RawIQRead::GetPulseData(RawPulseData * ThisPulse)
{
  while(OutputBufferFull[LastPulse] == false){
	Sleep(10);      //Wait for data
  }

  memcpy(ThisPulse, &TheRawIQData[LastPulse], sizeof(RawPulseData));
  OutputBufferFull[LastPulse] = false;
  LastPulse++;
  LastPulse %= NRAWPULSESOUT;
}

int RawIQRead::GetBadPulses(){
	return BadPulses;
}

void RawIQRead::ResetBadPulses(){
	BadPulses = 0;
}

bool RawIQRead::GetOverflowError(){
	return OverflowError;
}

void RawIQRead::ResetBuffers(){
	fLock->Acquire();
	__try{
		for(int i = 0; i < NRAWPULSESOUT; i++)
			OutputBufferFull[i] = false;

		BadPulses          = 0;
		CurrentOutputCount = 0;
		LastPulse          = 0;
		SequenceNumber     = 0;
		OverflowError      = false;
	}
	__finally{
		fLock->Release();
	}
}

