#include <math.h>
#include "AFCProcessor.h"
#include "ProcessingThread.h"
#include "DataParameters.h"
#include "IntegratedData.h"

#include "RawIQRead.h"
#include "ShellChirimbolo.h"
#include "Site.h"

#pragma package(smart_init)
//---------------------------------------------------------------------------

__fastcall ProcessingThread::ProcessingThread(bool CreateSuspended): TThread(CreateSuspended)
{
  TheRawIQ = new RawIQRead(true);

  this->Priority = tpHighest;
  PulseDataIn    = new RawPulseData[DATABUFFERS];
  RawPulseDataIn = new RawPulseData[DATABUFFERS];
  count          = 0;
  FilterData     = new TDataFilter();
  Filtering      = false;
}
//---------------------------------------------------------------------------

void __fastcall ProcessingThread::Execute()
{
  TheRawIQ->Resume();

  unsigned int SequenceNumber = 0;
  int SectorRayCount = 0;
  int Rays = 0;

  double Lag0ValMag;
  double Lag1ValMag;
  double Lag2ValMag;

  double P0;
  double P1;
  double P2;

  int lag0, lag1, lag2, lag3, lag4;

  EnoughRays  = false;
  FilterStart = 0;
  bool ChangingPulse = true;
  bool FirstSector = true;
  bool FullSectors;

  while(!Terminated){
	  try {
		  if(TheRawIQ->GetOverflowError()){
			TheRawIQ->ResetBuffers();
			throw new Exception("Buffer overflow...");
		  }

		  TheRawIQ->GetPulseData(&RawPulseDataIn[count]);
		  if((ThisSite->TheRadar->GetCurrentPulseMode() != RawPulseDataIn[count].PulseMode) || ThisSite->TheRadar->SyncChanged()){
			ChangingPulse = true;
		  }
		  else if(ChangingPulse){
			ChangingPulse  = false;
			FirstSector    = true;
			SectorRayCount = 0;
		  }
		  else{
			  lag0 = count;
			  lag1 = (count + DATABUFFERS - 1) % DATABUFFERS;
			  lag2 = (count + DATABUFFERS - 2) % DATABUFFERS;

			  SectorRayCount++;
			  //sectors spliter
			  if((SectorRayCount > 1) && (RawPulseDataIn[lag1].PRFChange != RawPulseDataIn[lag0].PRFChange)){
				if(FirstSector){
					FirstSector   = false;
					FullSectors   = false;
					EnoughRays    = false;
					CurrentSector = 0;
				}
				else{
					HalfSector[CurrentSector].PRF_Change = RawPulseDataIn[lag1].PRFChange;
					HalfSector[CurrentSector].NData      = RawPulseDataIn[lag1].NData;
					HalfSector[CurrentSector].DataMode   = RawPulseDataIn[lag1].PulseMode;
					HalfSector[CurrentSector].RayCount   = SectorRayCount-1;
					CurrentSector = (CurrentSector+1) % 2;

					if(FullSectors)
						IntegrateData(CurrentSector);
					else
						FullSectors = true;
				}
				InitHalfSector(CurrentSector);
				SectorRayCount = 1;
			  }

			  if(!FirstSector){
				  for(int i=0; i<RawPulseDataIn[lag0].NData; i++){
					raw_i[i] = RawPulseDataIn[lag0].I[i];
					raw_q[i] = RawPulseDataIn[lag0].Q[i];
				  }

				  PhaseCorrect(&RawPulseDataIn[lag0]);

				  //Interference Filter
				  /*
				  if(SectorRayCount > 2){
					  for(int i = 0; i < PulseDataIn[lag0].NData; i++){
						  Lag0ValMag = (RawPulseDataIn[lag0].I[i] * RawPulseDataIn[lag0].I[i] + RawPulseDataIn[lag0].Q[i] * RawPulseDataIn[lag0].Q[i]);
						  Lag1ValMag = (RawPulseDataIn[lag1].I[i] * RawPulseDataIn[lag1].I[i] + RawPulseDataIn[lag1].Q[i] * RawPulseDataIn[lag1].Q[i]);
						  Lag2ValMag = (RawPulseDataIn[lag2].I[i] * RawPulseDataIn[lag2].I[i] + RawPulseDataIn[lag2].Q[i] * RawPulseDataIn[lag2].Q[i]);

						  P0 = 10.0 * log10(Lag0ValMag);
						  P1 = 10.0 * log10(Lag1ValMag);
						  P2 = 10.0 * log10(Lag2ValMag);

						  P0 = ConvertValueDB(P0, RawPulseDataIn[lag0].PulseMode);
						  if(P0 == Sample_Excluded) P0 = 0;
						  P1 = ConvertValueDB(P1, RawPulseDataIn[lag1].PulseMode);
						  if(P1 == Sample_Excluded) P1 = 0;
						  P2 = ConvertValueDB(P2, RawPulseDataIn[lag2].PulseMode);
						  if(P2 == Sample_Excluded) P2 = 0;

						  //filter
						  double LinAvg = (P2 + P1) / 2;
						  if((fabs(P1-P2) < ThisSite->C1) && (P0-LinAvg > ThisSite->C2)){
							RawPulseDataIn[lag0].I[i] = RawPulseDataIn[lag1].I[i];
							RawPulseDataIn[lag0].Q[i] = RawPulseDataIn[lag1].Q[i];
						  }
					  }
				  }
				  */

				  //IIR Clutter Filter for PPP-Mode
				  double Elevation = RawPulseDataIn[lag0].Elevation * CONV_FACTOR;
				  if(Filtering && (Elevation <= FilterData->MaxAngle)){
					if(EnoughRays){
						lag3 = (count + DATABUFFERS - 3) % DATABUFFERS;
						lag4 = (count + DATABUFFERS - 4) % DATABUFFERS;

						PulseDataIn[lag0].SPMode         = RawPulseDataIn[lag0].SPMode;
						PulseDataIn[lag0].PRFChange      = RawPulseDataIn[lag0].PRFChange;
						PulseDataIn[lag0].PRFRate        = RawPulseDataIn[lag0].PRFRate;
						PulseDataIn[lag0].PulseMode      = RawPulseDataIn[lag0].PulseMode;
						PulseDataIn[lag0].NData          = RawPulseDataIn[lag0].NData;
						PulseDataIn[lag0].Azimuth        = RawPulseDataIn[lag0].Azimuth;
						PulseDataIn[lag0].Elevation      = RawPulseDataIn[lag0].Elevation;
						PulseDataIn[lag0].SequenceNumber = RawPulseDataIn[lag0].SequenceNumber;

						int    CellSize      = (RawPulseDataIn[lag0].PulseMode == LP_MODE1)? BIN_LENGTH_LP : BIN_LENGTH_SP;
						double Elevation_Sin = Sin(Elevation*PI/180);

						for(int i=0; i < RawPulseDataIn[lag0].NData; i++){
							int    CellPosition = (i+1)*CellSize;
							double CellHeigh    = CellPosition * Elevation_Sin;
							if((CellPosition <= FilterData->MaxDistance) && (CellHeigh <= FilterData->MaxHeigh)){
								PulseDataIn[lag0].I[i] = FilterData->B0 * RawPulseDataIn[lag0].I[i] +
														 FilterData->B1 * RawPulseDataIn[lag1].I[i] +
														 FilterData->B2 * RawPulseDataIn[lag2].I[i] +
														 FilterData->B3 * RawPulseDataIn[lag3].I[i] +
														 FilterData->B4 * RawPulseDataIn[lag4].I[i] -
														 FilterData->C1 * PulseDataIn[lag1].I[i]    -
														 FilterData->C2 * PulseDataIn[lag2].I[i]    -
														 FilterData->C3 * PulseDataIn[lag3].I[i]    -
														 FilterData->C4 * PulseDataIn[lag4].I[i];

								PulseDataIn[lag0].Q[i] = FilterData->B0 * RawPulseDataIn[lag0].Q[i] +
														 FilterData->B1 * RawPulseDataIn[lag1].Q[i] +
														 FilterData->B2 * RawPulseDataIn[lag2].Q[i] +
														 FilterData->B3 * RawPulseDataIn[lag3].Q[i] +
														 FilterData->B4 * RawPulseDataIn[lag4].Q[i] -
														 FilterData->C1 * PulseDataIn[lag1].Q[i]    -
														 FilterData->C2 * PulseDataIn[lag2].Q[i]    -
														 FilterData->C3 * PulseDataIn[lag3].Q[i]    -
														 FilterData->C4 * PulseDataIn[lag4].Q[i];
							}
							else{
								PulseDataIn[lag0].I[i] = RawPulseDataIn[lag0].I[i];
								PulseDataIn[lag0].Q[i] = RawPulseDataIn[lag0].Q[i];
							}
						}
					}
					else{
						memcpy(&PulseDataIn[lag0], &RawPulseDataIn[lag0], sizeof(RawPulseData));
						FilterStart++;
						if(FilterStart == DATABUFFERS-1){
							EnoughRays = true;
						}
					}
				  }
				  else{
					  memcpy(&PulseDataIn[lag0], &RawPulseDataIn[lag0], sizeof(RawPulseData));
				  }

				  if(FOnNewIQData != NULL){
					FOnNewIQData(this, RawPulseDataIn[lag0], PulseDataIn[lag0]);
				  }

				  //Sector processing
				  if(SectorRayCount > 1){
					  if(abs(PulseDataIn[lag1].Azimuth - PulseDataIn[lag0].Azimuth) > 8192)
						PulseDataIn[lag0].Azimuth = PulseDataIn[lag1].Azimuth;
				  }

				  HalfSector[CurrentSector].Azimuth   += PulseDataIn[lag0].Azimuth;
				  HalfSector[CurrentSector].Elevation += PulseDataIn[lag0].Elevation;

				  for(int i=0; i < PulseDataIn[lag0].NData; i++){
					  HalfSector[CurrentSector].raw_mag[i] += raw_i[i] * raw_i[i] + raw_q[i] * raw_q[i];
					  HalfSector[CurrentSector].T0[i] += RawPulseDataIn[lag0].I[i] * RawPulseDataIn[lag0].I[i] + RawPulseDataIn[lag0].Q[i] * RawPulseDataIn[lag0].Q[i];
					  Lag0ValMag = PulseDataIn[lag0].I[i] * PulseDataIn[lag0].I[i] + PulseDataIn[lag0].Q[i] * PulseDataIn[lag0].Q[i];
					  HalfSector[CurrentSector].R0[i] += Lag0ValMag;

					  if(SectorRayCount > 1){
						  HalfSector[CurrentSector].R1[2*i]   += (PulseDataIn[lag0].I[i] * PulseDataIn[lag1].I[i] + PulseDataIn[lag0].Q[i] * PulseDataIn[lag1].Q[i]);
						  HalfSector[CurrentSector].R1[2*i+1] += (PulseDataIn[lag0].Q[i] * PulseDataIn[lag1].I[i] - PulseDataIn[lag1].Q[i] * PulseDataIn[lag0].I[i]);
					  }

					  /*
					  if(SectorRayCount > 2){
						  Lag2ValMag = PulseDataIn[lag2].I[i] * PulseDataIn[lag2].I[i] + PulseDataIn[lag2].Q[i] * PulseDataIn[lag2].Q[i];
						  HalfSector[CurrentSector].R2[2*i]   += (PulseDataIn[lag0].I[i] * PulseDataIn[lag2].I[i] + PulseDataIn[lag0].Q[i] * PulseDataIn[lag2].Q[i]);
						  HalfSector[CurrentSector].R2[2*i+1] += (PulseDataIn[lag0].Q[i] * PulseDataIn[lag2].I[i] - PulseDataIn[lag2].Q[i] * PulseDataIn[lag0].I[i]);

						  if(Lag0ValMag > Lag2ValMag)
							HalfSector[CurrentSector].CI[i] += (Lag2ValMag != 0) ? (Lag0ValMag / Lag2ValMag) : 0;
						  else
							HalfSector[CurrentSector].CI[i] += (Lag0ValMag != 0) ? (Lag2ValMag / Lag0ValMag) : 0;
					  }
					  */
				  }
			  }

			  count++;
			  count %= DATABUFFERS;
		  }
	  } catch (Exception &error) {
		ChangingPulse = true;
		ThisSite->TheRadar->LastError = error.Message;
	  }
	}
	TheRawIQ->Terminate();
}

void __fastcall ProcessingThread::IntegrateData(int StorageSector)
{
	double Lag0Mag;
	double Lag1Mag;
	double Lag2Mag;

	if(HalfSector[0].PRF_Change == 0){
		LowFreqIndex  = 0;
		HighFreqIndex = 1;
	}
	else{
		LowFreqIndex  = 1;
		HighFreqIndex = 0;
	}

	int    NData         = HalfSector[HighFreqIndex].NData;
	int    TotalRays     = HalfSector[LowFreqIndex].RayCount + HalfSector[HighFreqIndex].RayCount;
	int    mode          = HalfSector[LowFreqIndex].DataMode;
	int    CellSize      = (mode == LP_MODE) ? BIN_LENGTH_LP : BIN_LENGTH_SP;
	int    Dinamic_range = (mode == LP_MODE) ? ThisSite->Dinamic_range_LP : ThisSite->Dinamic_range_SP;
	double MaxSpeed      = GetMaxSpeed(mode);
	double Noise         = 0.0;

	try {
		if (Dinamic_range > 0) {
			Noise = (mode == LP_MODE) ? ThisSite->Conv_table_lp[0] : ThisSite->Conv_table_sp[0];
			Noise = pow(10.0, Noise/10);
		}
	} catch (...) {
		Noise = 0;
	}

	//power
	for(int i=0; i < NData; i++){
		HalfSector[StorageSector].T0[i]      = (HalfSector[LowFreqIndex].T0[i]      + HalfSector[HighFreqIndex].T0[i])      / TotalRays;
		HalfSector[StorageSector].R0[i]      = (HalfSector[LowFreqIndex].R0[i]      + HalfSector[HighFreqIndex].R0[i])      / TotalRays;
		HalfSector[StorageSector].raw_mag[i] = (HalfSector[LowFreqIndex].raw_mag[i] + HalfSector[HighFreqIndex].raw_mag[i]) / TotalRays;

		raw_power[i] = 10.0 * log10(HalfSector[StorageSector].raw_mag[i]);
		LOG[i]       = (Noise > 0) ? 10.0 * log10((HalfSector[StorageSector].T0[i] - Noise) / Noise) : 10.0 * log10(HalfSector[StorageSector].T0[i]);

		double T0_DB = 10 * log10(HalfSector[StorageSector].T0[i]);
		double R0_DB = 10 * log10(HalfSector[StorageSector].R0[i]);

		T0_DB = ConvertValueDB(T0_DB, mode);
		R0_DB = ConvertValueDB(R0_DB, mode);

		//CCOR[i] =  10.0 * log10(HalfSector[StorageSector].R0[i] / HalfSector[StorageSector]].T0[i]) = 10 * log10(HalfSector[StorageSector]].R0[i]) - 10 * log10(HalfSector[StorageSector]].T0[i])
		if((T0_DB == Sample_Excluded) || (R0_DB == Sample_Excluded)){
			CCOR[i] = 0;
			SIG[i]  = 0;
		}
		else{
			CCOR[i] = R0_DB - T0_DB;
			SIG[i]  = LOG[i] + CCOR[i];
		}

		dBT[i]  = T0_DB;
		dBZ[i]  = R0_DB;
	}

	if((FilterData != NULL) && FilterData->Speckles && (FilterData->SpeckleSize > 0)){
		RemoveSpeckles(CellSize, NData, dBT);
		RemoveSpeckles(CellSize, NData, dBZ);
	}

	//speed
	double VConvFactor = GetVConvFactor(mode);

	if((mode == LP_MODE) || (mode == SP_MODE)){
		for(int i=0; i < NData; i++){
			if(dBT[i] != Sample_Excluded){
				HalfSector[StorageSector].R1[2*i]   = (HalfSector[LowFreqIndex].R1[2*i]   + HalfSector[HighFreqIndex].R1[2*i])   / (TotalRays-2);
				HalfSector[StorageSector].R1[2*i+1] = (HalfSector[LowFreqIndex].R1[2*i+1] + HalfSector[HighFreqIndex].R1[2*i+1]) / (TotalRays-2);

				V[i] = atan2(HalfSector[StorageSector].R1[2*i+1], HalfSector[StorageSector].R1[2*i]) * VConvFactor;
			}
			else V[i] = Sample_Excluded;
		}
	}
	else{
		double AvR1LowReal, AvR1LowImg, AvR1HighReal, AvR1HighImg;
		double AvR1Real, AvR1Img;

		for(int i=0; i < NData; i++){
			if(dBT[i] != Sample_Excluded){
				AvR1LowReal  = HalfSector[LowFreqIndex].R1[2*i]    / (HalfSector[LowFreqIndex].RayCount-1);
				AvR1LowImg   = HalfSector[LowFreqIndex].R1[2*i+1]  / (HalfSector[LowFreqIndex].RayCount-1);
				AvR1HighReal = HalfSector[HighFreqIndex].R1[2*i]   / (HalfSector[HighFreqIndex].RayCount-1);
				AvR1HighImg  = HalfSector[HighFreqIndex].R1[2*i+1] / (HalfSector[HighFreqIndex].RayCount-1);

				try {
					AvR1Real = (AvR1LowReal * AvR1HighReal) + (AvR1LowImg * AvR1HighImg);
					AvR1Img  = (AvR1HighReal * AvR1LowImg) - (AvR1LowReal * AvR1HighImg);
					V[i] = atan2(AvR1Img,  AvR1Real) * VConvFactor;
				} catch (...) {
					V[i] = Sample_Excluded;
				}
			}
			else V[i] = Sample_Excluded;

			HalfSector[StorageSector].R1[2*i]   = (HalfSector[LowFreqIndex].R1[2*i]   + HalfSector[HighFreqIndex].R1[2*i])   / (TotalRays-2);
			HalfSector[StorageSector].R1[2*i+1] = (HalfSector[LowFreqIndex].R1[2*i+1] + HalfSector[HighFreqIndex].R1[2*i+1]) / (TotalRays-2);
		}
	}

	//width, Ci, SQI
	for(int i=0; i < NData; i++){
		/*
		HalfSector[StorageSector].R2[2*i]   = (HalfSector[LowFreqIndex].R2[2*i]   + HalfSector[HighFreqIndex].R2[2*i])   / (TotalRays-4);
		HalfSector[StorageSector].R2[2*i+1] = (HalfSector[LowFreqIndex].R2[2*i+1] + HalfSector[HighFreqIndex].R2[2*i+1]) / (TotalRays-4);

		CI[i]   = (HalfSector[LowFreqIndex].CI[i] + HalfSector[HighFreqIndex].CI[i]) / (TotalRays-4);
		CI[i]   = 10.0 * log10(CI[i]);
		*/

		if(dBT[i] != Sample_Excluded){
			Lag1Mag = (HalfSector[StorageSector].R1[2*i] * HalfSector[StorageSector].R1[2*i]) + (HalfSector[StorageSector].R1[2*i+1] * HalfSector[StorageSector].R1[2*i+1]);
			Lag1Mag = sqrt(Lag1Mag);

			SQI[i]  = Lag1Mag / HalfSector[StorageSector].R0[i];

			//fast method
			try {
				W[i] = -2 * log(SQI[i]);
				W[i] = sqrt(W[i]);
			} catch (...) {
				W[i] = Sample_Excluded;
			}

			//accuracy method
			/*
			Lag2Mag = (HalfSector[StorageSector].R2[2*i] * HalfSector[StorageSector].R2[2*i]) + (HalfSector[StorageSector].R2[2*i+1] * HalfSector[StorageSector].R2[2*i+1]);
			Lag2Mag = sqrt(Lag2Mag);
			try {
				W[i] = 2/3 * log(Lag1Mag/Lag2Mag);
				W[i] = sqrt(W[i]);
			} catch (...) {
				W[i] = Sample_Excluded;
			}
			*/
		}
		else{
			W[i]   = Sample_Excluded;
			SQI[i] = 0;
		}

		//Thresholding
		if(FilterData->SQI && (SQI[i] <= ThisSite->ThresholdSQI)){
			V[i] = Sample_Excluded;
			W[i] = Sample_Excluded;
		}
		if(FilterData->LOG && (LOG[i] <= ThisSite->ThresholdLOG)){
			dBZ[i] = Sample_Excluded;
			dBT[i] = Sample_Excluded;
		}
		if(FilterData->CCOR && (CCOR[i] <= ThisSite->ThresholdCCOR)){
			dBZ[i] = Sample_Excluded;
			V[i]   = Sample_Excluded;
			W[i]   = Sample_Excluded;
		}
		if(FilterData->SIG && (SIG[i] <= ThisSite->ThresholdSIG)){
			W[i] = Sample_Excluded;
		}
	}

	HalfSector[StorageSector].Elevation = floor((HalfSector[LowFreqIndex].Elevation + HalfSector[HighFreqIndex].Elevation) / TotalRays);

	double LowSectorAz  = HalfSector[LowFreqIndex].Azimuth / HalfSector[LowFreqIndex].RayCount;
	double HighSectorAz = HalfSector[HighFreqIndex].Azimuth / HalfSector[HighFreqIndex].RayCount;
	if(abs(LowSectorAz - HighSectorAz) > 8192)
		HalfSector[StorageSector].Azimuth = 0;
	else
		HalfSector[StorageSector].Azimuth = floor((HalfSector[LowFreqIndex].Azimuth + HalfSector[HighFreqIndex].Azimuth) / TotalRays);

	if(FOnNewSectorData != NULL)
	  FOnNewSectorData(this, HalfSector[StorageSector].Azimuth, HalfSector[StorageSector].Elevation, TotalRays, mode, NData, raw_power, dBT, dBZ, V, W, SQI, LOG, SIG, CCOR);

	//clear data
	memset(V,         0, sizeof(float) * NData);
	memset(W,         0, sizeof(float) * NData);
	memset(SQI,       0, sizeof(float) * NData);
	memset(CCOR,      0, sizeof(float) * NData);
	memset(SIG,       0, sizeof(float) * NData);
	memset(LOG,       0, sizeof(float) * NData);
	memset(dBZ,       0, sizeof(float) * NData);
	memset(dBT,       0, sizeof(float) * NData);
	memset(raw_power, 0, sizeof(float) * NData);
}

double ProcessingThread::ConvertValueDB(double value, int mode){
	double result = Sample_Excluded;
	int Dinamic_range = (mode == LP_MODE) ? ThisSite->Dinamic_range_LP : ThisSite->Dinamic_range_SP;
	TFloatArray Conv_table = (mode == LP_MODE) ? ThisSite->Conv_table_lp : ThisSite->Conv_table_sp;

	if((Dinamic_range > 0) && (Conv_table.Length == Dinamic_range)){
		if(value < Conv_table[0]) return Sample_Excluded;

		int Sensibility = (mode == LP_MODE) ? ThisSite->Sensibility_LP : ThisSite->Sensibility_SP;

		int Top    = Dinamic_range-1;
		int Bottom = 0;
		int Index = (Top - Bottom) / 2;

		while((Index != Bottom) && (Conv_table[Index] != value)){
			double DB = Conv_table[Index];
			if(value > DB)
				Bottom = Index;
			else
				Top = Index;

			Index = Bottom + ((Top - Bottom) / 2);
		}

		result = Index;
	}

	return result;
}

double ProcessingThread::GetVConvFactor(int mode, int FreqIndex){
  switch (mode) {
	case LP_MODE   : return ThisSite->_LP_CONV_FACTOR_;
	case SP_MODE   : return ThisSite->_SP_Single_CONV_FACTOR_;
	case SP_54_MODE: return (FreqIndex == 0) ? ThisSite->_SP_Dual_54_Low_CONV_FACTOR_ : ThisSite->_SP_Dual_54_High_CONV_FACTOR_;
	case SP_43_MODE: return (FreqIndex == 0) ? ThisSite->_SP_Dual_43_Low_CONV_FACTOR_ : ThisSite->_SP_Dual_43_High_CONV_FACTOR_;
	case SP_32_MODE: return (FreqIndex == 0) ? ThisSite->_SP_Dual_32_Low_CONV_FACTOR_ : ThisSite->_SP_Dual_32_High_CONV_FACTOR_;
  }

  return 0;
}

double ProcessingThread::GetVConvFactor(int mode){
  switch (mode) {
	case LP_MODE   : return ThisSite->_LP_CONV_FACTOR_;
	case SP_MODE   : return ThisSite->_SP_Single_CONV_FACTOR_;
	case SP_54_MODE: return ThisSite->_SP_Dual_54_CONV_FACTOR_;
	case SP_43_MODE: return ThisSite->_SP_Dual_43_CONV_FACTOR_;
	case SP_32_MODE: return ThisSite->_SP_Dual_32_CONV_FACTOR_;
  }

  return 0;
}

double ProcessingThread::GetMaxSpeed(int mode){
  switch (mode) {
	case LP_MODE   :  return ThisSite->_LP_MaxSpeed;
	case SP_MODE   :  return ThisSite->_SP_Single_MaxSpeed;
	case SP_54_MODE:  return ThisSite->_SP_Dual_54_MaxSpeed;
	case SP_43_MODE:  return ThisSite->_SP_Dual_43_MaxSpeed;
	case SP_32_MODE:  return ThisSite->_SP_Dual_32_MaxSpeed;
  }

  return 0;
}

double ProcessingThread::Get_N_Factor(int mode){
  switch (mode) {
	case SP_54_MODE:  return 4;
	case SP_43_MODE:  return 3;
	case SP_32_MODE:  return 2;
  }

  return 0;
}

void ProcessingThread::InitHalfSector(int Sector)
{
  HalfSector[Sector].RayCount  = 0;
  HalfSector[Sector].Azimuth   = 0;
  HalfSector[Sector].Elevation = 0;

  memset(HalfSector[Sector].raw_mag, 0, NDATA * sizeof(double));
  memset(HalfSector[Sector].T0,      0, NDATA * sizeof(double));
  memset(HalfSector[Sector].R0,      0, NDATA * sizeof(double));
  memset(HalfSector[Sector].R1,      0, 2 * NDATA * sizeof(double));
/*
  memset(HalfSector[Sector].R2,      0, 2 * NDATA * sizeof(double));
  memset(HalfSector[Sector].CI,      0, NDATA * sizeof(double));
*/
}

void __fastcall ProcessingThread::PhaseCorrect(RawPulseData * TheRawPulse)
{
  int TX_Offset;
  int RX_Offset;
  double TxI, TxQ, TxNorm;

  TX_Offset = (TheRawPulse->SPMode) ? ThisSite->SP_TX_PulsePosition : ThisSite->LP_TX_PulsePosition;
  RX_Offset = (TheRawPulse->SPMode) ? ThisSite->SP_RX_PulsePosition : ThisSite->LP_RX_PulsePosition;

  TxI = TheRawPulse->I[TX_Offset];
  TxQ = TheRawPulse->Q[TX_Offset];

  if(TxI == 0 && TxQ == 0){
	TxNorm = 1;
  }
  else{
	TxNorm = sqrt(TxI * TxI + TxQ * TxQ);
	TxNorm = 1.0 / TxNorm;
  }

  int Index = 0;
  for(int i = RX_Offset; i < TheRawPulse->NData; i++){
	TheRawPulse->I[Index] = (TheRawPulse->I[i] * TxI + TheRawPulse->Q[i] * TxQ) * TxNorm;
	TheRawPulse->Q[Index] = (TheRawPulse->Q[i] * TxI - TheRawPulse->I[i] * TxQ) * TxNorm;

	Index++;
  }

  TheRawPulse->NData -= RX_Offset;
}

void __fastcall ProcessingThread::RemoveSpeckles(int cell_size, int cell_count, float* data)
{
	short Threshold = floor(FilterData->SpeckleSize / cell_size);
	int Index = 0;
	do{
		while((data[Index] == Sample_Excluded) && (Index < cell_count)) Index++;
		if(Index < cell_count){
			int Start = Index;
			Index++;
			while((data[Index] != Sample_Excluded) && (Index < cell_count)) Index++;
			if(Index-Start <= Threshold){
				for(int i=Start; i < Index; i++) data[i] = Sample_Excluded;
				Index++;
			}
		}
	}while(Index < cell_count);
}

void ProcessingThread::SetFilter(TDataFilter* FilterInfo, bool Status){
	Filtering = false;
	ResetFilter();
	if(FilterInfo != NULL){
		FilterData->B0 = FilterInfo->B0;
		FilterData->B1 = FilterInfo->B1;
		FilterData->B2 = FilterInfo->B2;
		FilterData->B3 = FilterInfo->B3;
		FilterData->B4 = FilterInfo->B4;
		FilterData->C1 = FilterInfo->C1;
		FilterData->C2 = FilterInfo->C2;
		FilterData->C3 = FilterInfo->C3;
		FilterData->C4 = FilterInfo->C4;

		FilterData->MaxAngle    = FilterInfo->MaxAngle;
		FilterData->MaxHeigh    = FilterInfo->MaxHeigh;
		FilterData->MaxDistance = FilterInfo->MaxDistance;

		FilterData->SQI  = FilterInfo->SQI;
		FilterData->SIG  = FilterInfo->SIG;
		FilterData->LOG  = FilterInfo->LOG;
		FilterData->CCOR = FilterInfo->CCOR;

		FilterData->Speckles    = FilterInfo->Speckles;
		FilterData->SpeckleSize = FilterInfo->SpeckleSize;

		Filtering = Status;
	}
}

void ProcessingThread::ResetFilter(){
	FilterStart = 0;
	EnoughRays  = false;
}
