// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 16580 $
// File generated on 5/4/2018 1:57:18 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Documents and Settings\ldt\Escritorio\TestModBusC++ 1\ModBusLibrary1.tlb (1)
// LIBID: {F34F72CD-D52F-4DBF-B9E1-370EBBE3C4DB}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
// ************************************************************************ //
#ifndef   ModBusLibrary1_TLBH
#define   ModBusLibrary1_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "mscorlib_TLB.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Modbuslibrary1_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ModBusLibrary1;
extern __declspec (package) const GUID IID_IModLib;
extern __declspec (package) const GUID CLSID_ModLib;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{97D1968E-DC7F-45BD-BD0E-1AC822D95264}") IModLib;
typedef TComInterface<IModLib, &IID_IModLib> IModLibPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IModLib ModLib;
typedef IModLibPtr ModLibPtr;

#define LIBID_OF_ModLib (&LIBID_ModBusLibrary1)
// *********************************************************************//
// Interface: IModLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {97D1968E-DC7F-45BD-BD0E-1AC822D95264}
// *********************************************************************//
interface IModLib  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Sumar(long a/*[in]*/, long b/*[in]*/, 
                                          double* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, 
                                            long iStart/*[in]*/, long iLength/*[in]*/, 
                                            VARIANT_BOOL bRegister/*[in]*/, 
                                            long* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE WriteBit(long module/*[in]*/, long bit/*[in]*/, 
                                             VARIANT_BOOL state/*[in]*/, 
                                             VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE WriteCode(long module/*[in]*/, long channel/*[in]*/, 
                                              long code/*[in]*/, 
                                              VARIANT_BOOL* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OpenComPort(long* pRetVal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DataGet(LPSAFEARRAY* pRetVal/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall Sumar(long a/*[in]*/, long b/*[in]*/)
  {
    double pRetVal;
    OLECHECK(this->Sumar(a, b, (double*)&pRetVal));
    return pRetVal;
  }

  long __fastcall ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                          long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/)
  {
    long pRetVal;
    OLECHECK(this->ConfMod(iCom, iAddr, iStart, iLength, bRegister, (long*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall WriteBit(long module/*[in]*/, long bit/*[in]*/, VARIANT_BOOL state/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->WriteBit(module, bit, state, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/)
  {
    VARIANT_BOOL pRetVal;
    OLECHECK(this->WriteCode(module, channel, code, (VARIANT_BOOL*)&pRetVal));
    return pRetVal;
  }

  long __fastcall OpenComPort(void)
  {
    long pRetVal;
    OLECHECK(this->OpenComPort((long*)&pRetVal));
    return pRetVal;
  }

  LPSAFEARRAY __fastcall DataGet(void)
  {
    LPSAFEARRAY pRetVal;
    OLECHECK(this->DataGet((LPSAFEARRAY*)&pRetVal));
    return pRetVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIModLib
// Interface: IModLib
// *********************************************************************//
template <class T /* IModLib */ >
class TCOMIModLibT : public TComInterface<IModLib>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIModLibT() {}
  TCOMIModLibT(IModLib *intf, bool addRef = false) : TComInterface<IModLib>(intf, addRef) {}
  TCOMIModLibT(const TCOMIModLibT& src) : TComInterface<IModLib>(src) {}
  TCOMIModLibT& operator=(const TCOMIModLibT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Sumar(long a/*[in]*/, long b/*[in]*/, double* pRetVal/*[out,retval]*/);
  double          __fastcall Sumar(long a/*[in]*/, long b/*[in]*/);
  HRESULT         __fastcall ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                                     long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/, 
                                     long* pRetVal/*[out,retval]*/);
  long            __fastcall ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                                     long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/);
  HRESULT         __fastcall WriteBit(long module/*[in]*/, long bit/*[in]*/, 
                                      VARIANT_BOOL state/*[in]*/, 
                                      VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall WriteBit(long module/*[in]*/, long bit/*[in]*/, 
                                      VARIANT_BOOL state/*[in]*/);
  HRESULT         __fastcall WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/, 
                                       VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/);
  HRESULT         __fastcall OpenComPort(long* pRetVal/*[out,retval]*/);
  long            __fastcall OpenComPort(void);
  HRESULT         __fastcall DataGet(LPSAFEARRAY* pRetVal/*[out,retval]*/);
  LPSAFEARRAY     __fastcall DataGet(void);

};
typedef TCOMIModLibT<IModLib> TCOMIModLib;

// *********************************************************************//
// DispIntf:  IModLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {97D1968E-DC7F-45BD-BD0E-1AC822D95264}
// *********************************************************************//
template<class T>
class IModLibDispT : public TAutoDriver<IModLib>
{
public:
  IModLibDispT(){}

  IModLibDispT(IModLib *pintf)
  {
    TAutoDriver<IModLib>::Bind(pintf, false);
  }

  IModLibDispT(IModLibPtr pintf)
  {
    TAutoDriver<IModLib>::Bind(pintf, true);
  }

  IModLibDispT& operator=(IModLib *pintf)
  {
    TAutoDriver<IModLib>::Bind(pintf, false);
    return *this;
  }

  IModLibDispT& operator=(IModLibPtr pintf)
  {
    TAutoDriver<IModLib>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ModLib));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ModLib);
  }

  HRESULT         __fastcall Sumar(long a/*[in]*/, long b/*[in]*/, double* pRetVal/*[out,retval]*/);
  double          __fastcall Sumar(long a/*[in]*/, long b/*[in]*/);
  HRESULT         __fastcall ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                                     long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/, 
                                     long* pRetVal/*[out,retval]*/);
  long            __fastcall ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                                     long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/);
  HRESULT         __fastcall WriteBit(long module/*[in]*/, long bit/*[in]*/, 
                                      VARIANT_BOOL state/*[in]*/, 
                                      VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall WriteBit(long module/*[in]*/, long bit/*[in]*/, 
                                      VARIANT_BOOL state/*[in]*/);
  HRESULT         __fastcall WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/
                                       , VARIANT_BOOL* pRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/);
  HRESULT         __fastcall OpenComPort(long* pRetVal/*[out,retval]*/);
  long            __fastcall OpenComPort(void);
  HRESULT         __fastcall DataGet(LPSAFEARRAY* pRetVal/*[out,retval]*/);
  LPSAFEARRAY     __fastcall DataGet(void);

};
typedef IModLibDispT<IModLib> IModLibDisp;

// *********************************************************************//
// SmartIntf: TCOMIModLib
// Interface: IModLib
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIModLibT<T>::Sumar(long a/*[in]*/, long b/*[in]*/, double* pRetVal/*[out,retval]*/)
{
  return (*this)->Sumar(a, b, pRetVal);
}

template <class T> double __fastcall
TCOMIModLibT<T>::Sumar(long a/*[in]*/, long b/*[in]*/)
{
  double pRetVal;
  OLECHECK(this->Sumar(a/*[in]*/, b/*[in]*/, (double*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIModLibT<T>::ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                         long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/, 
                         long* pRetVal/*[out,retval]*/)
{
  return (*this)->ConfMod(iCom, iAddr, iStart, iLength, bRegister, pRetVal);
}

template <class T> long __fastcall
TCOMIModLibT<T>::ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                         long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/)
{
  long pRetVal;
  OLECHECK(this->ConfMod(iCom/*[in]*/, iAddr/*[in]*/, iStart/*[in]*/, iLength/*[in]*/, 
                         bRegister/*[in]*/, (long*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIModLibT<T>::WriteBit(long module/*[in]*/, long bit/*[in]*/, VARIANT_BOOL state/*[in]*/, 
                          VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  return (*this)->WriteBit(module, bit, state, pRetVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIModLibT<T>::WriteBit(long module/*[in]*/, long bit/*[in]*/, VARIANT_BOOL state/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  OLECHECK(this->WriteBit(module/*[in]*/, bit/*[in]*/, state/*[in]*/, (VARIANT_BOOL*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIModLibT<T>::WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/, 
                           VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  return (*this)->WriteCode(module, channel, code, pRetVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIModLibT<T>::WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  OLECHECK(this->WriteCode(module/*[in]*/, channel/*[in]*/, code/*[in]*/, (VARIANT_BOOL*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIModLibT<T>::OpenComPort(long* pRetVal/*[out,retval]*/)
{
  return (*this)->OpenComPort(pRetVal);
}

template <class T> long __fastcall
TCOMIModLibT<T>::OpenComPort(void)
{
  long pRetVal;
  OLECHECK(this->OpenComPort((long*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIModLibT<T>::DataGet(LPSAFEARRAY* pRetVal/*[out,retval]*/)
{
  return (*this)->DataGet(pRetVal);
}

template <class T> LPSAFEARRAY __fastcall
TCOMIModLibT<T>::DataGet(void)
{
  LPSAFEARRAY pRetVal;
  OLECHECK(this->DataGet((LPSAFEARRAY*)&pRetVal));
  return pRetVal;
}

// *********************************************************************//
// DispIntf:  IModLib
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {97D1968E-DC7F-45BD-BD0E-1AC822D95264}
// *********************************************************************//
template <class T> HRESULT __fastcall
IModLibDispT<T>::Sumar(long a/*[in]*/, long b/*[in]*/, double* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sumar"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<2> _args;
  _args[1] = a /*[VT_I4:0]*/;
  _args[2] = b /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IModLibDispT<T>::Sumar(long a/*[in]*/, long b/*[in]*/)
{
  double pRetVal;
  this->Sumar(a, b, (double*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IModLibDispT<T>::ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                         long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/, 
                         long* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConfMod"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<5> _args;
  _args[1] = iCom /*[VT_I4:0]*/;
  _args[2] = iAddr /*[VT_I4:0]*/;
  _args[3] = iStart /*[VT_I4:0]*/;
  _args[4] = iLength /*[VT_I4:0]*/;
  _args[5] = bRegister /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IModLibDispT<T>::ConfMod(long iCom/*[in]*/, long iAddr/*[in]*/, long iStart/*[in]*/, 
                         long iLength/*[in]*/, VARIANT_BOOL bRegister/*[in]*/)
{
  long pRetVal;
  this->ConfMod(iCom, iAddr, iStart, iLength, bRegister, (long*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IModLibDispT<T>::WriteBit(long module/*[in]*/, long bit/*[in]*/, VARIANT_BOOL state/*[in]*/, 
                          VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteBit"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<3> _args;
  _args[1] = module /*[VT_I4:0]*/;
  _args[2] = bit /*[VT_I4:0]*/;
  _args[3] = state /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IModLibDispT<T>::WriteBit(long module/*[in]*/, long bit/*[in]*/, VARIANT_BOOL state/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->WriteBit(module, bit, state, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IModLibDispT<T>::WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/, 
                           VARIANT_BOOL* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteCode"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<3> _args;
  _args[1] = module /*[VT_I4:0]*/;
  _args[2] = channel /*[VT_I4:0]*/;
  _args[3] = code /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IModLibDispT<T>::WriteCode(long module/*[in]*/, long channel/*[in]*/, long code/*[in]*/)
{
  VARIANT_BOOL pRetVal;
  this->WriteCode(module, channel, code, (VARIANT_BOOL*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IModLibDispT<T>::OpenComPort(long* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenComPort"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IModLibDispT<T>::OpenComPort(void)
{
  long pRetVal;
  this->OpenComPort((long*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IModLibDispT<T>::DataGet(LPSAFEARRAY* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataGet"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
IModLibDispT<T>::DataGet(void)
{
  LPSAFEARRAY pRetVal;
  this->DataGet((LPSAFEARRAY*)&pRetVal);
  return pRetVal;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ModLib
// Interface: TCOMIModLib
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIModLib, IModLib, &CLSID_ModLib, &IID_IModLib> CoModLib;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Modbuslibrary1_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Modbuslibrary1_tlb;
#endif

#pragma option pop

#endif // ModBusLibrary1_TLBH
