#define Hunt

#include <vcl.h>
#include <stdio.h>
#include <math.h>

#include <heapi.h>

#pragma hdrstop

#include "FIFOinterface.h"

#pragma package(smart_init)

#define M_ShutDown        0x0400  /* Shutdown message sent to all processors */
#define M_Hello           0x0400  /* Set PRF mode state */
#define M_SetPRFMode      0x0401  /* Set PRF mode state */
#define M_GatherRays      0x0402  /* Set Gathering of Rays*/
#define M_StopGatherRays  0x0403  /* Stop Gathering of Rays*/
#define M_GatherNRays     0x0404  /* Collect N Rays */
#define M_GetAzEl         0x0405  /* Get Current AzEl (used when not gathering) */
#define M_Sending_azel    0x0201  /* Message so PC knows to expect azel value   */
#define M_Sending_vector  0x0202  /* Message so PC knows to expect data vector  */

FIFOInterface::FIFOInterface(HE_WORD FIFONumber)
{
  BoardType = "hep9a";
  BoardId = 0;
  DeviceId = FIFONumber;
  HE_DWORD Status;

  InterfaceLock = new TCriticalSection();

  hDevice        = NULL;
  ReadIoStatus   = NULL;
  WriteIoStatus  = NULL;

#ifdef Hunt
  if (HeOpen(BoardType, BoardId, DeviceId, &hDevice) != HE_OK)
	  throw new Exception("ERROR Can't open device, exiting");

  if (HeInitIoStatus(hDevice, &ReadIoStatus) != HE_OK)
	  throw new Exception("ERROR Can't init Read I/O, exiting");

  if (HeInitIoStatus(hDevice, &WriteIoStatus) != HE_OK)
	  throw new Exception("ERROR Can't init Write I/O, exiting");
#endif
}

bool FIFOInterface::WriteWord(int wordout)
{
#ifdef Hunt
  HE_WORD status;

  InterfaceLock->Enter();
  __try
  {
	status = HeTestIo(hDevice, WriteIoStatus);
	if (status != HE_OK)
	  return false;

	status = HeWrite(hDevice, &wordout, sizeof(int), WriteIoStatus);
	if((status != HE_IoInProgress) && (status != HE_OK))
	  return false;

	while(status == HE_IoInProgress)
	{
	 status = HeTestIo(hDevice, WriteIoStatus);
	 Sleep( 0 );
	}
  }
  __finally
  {
	InterfaceLock->Leave();
  }

  return true;
#else
	return true;
#endif
}

bool FIFOInterface::ReadVector(void * data, int size)
{
#ifdef Hunt
  HE_WORD status;
  status = HeTestIo(hDevice, ReadIoStatus);
  if (status != HE_OK)
	  return false;

  status = HeRead(hDevice, data, size, ReadIoStatus);
  if((status != HE_IoInProgress) && (status != HE_OK))
	 return false;

  status = HeWaitForIo(hDevice, ReadIoStatus);
  return (status == HE_OK);
#else
  return true;
#endif
}

bool FIFOInterface::StartReadVector(void * Data,int size)
{
#ifdef Hunt
  HE_WORD status;
  status = HeTestIo(hDevice, ReadIoStatus);
  if (status != HE_OK)
	  return false;

  status = HeRead(hDevice, Data, size, ReadIoStatus);
  if((status != HE_IoInProgress) && (status != HE_OK))
	  return false;

  return true;
#else
  return true;
#endif
}

bool FIFOInterface::WriteVector(void * data, int size)
{
#ifdef Hunt
  HE_WORD status;
  status = HeTestIo(hDevice, WriteIoStatus);
  if (status != HE_OK)
	  return false;

  status = HeWrite(hDevice, data, size, WriteIoStatus);
  if((status != HE_IoInProgress) && (status != HE_OK))
	 return false;

  status = HeWaitForIo(hDevice, WriteIoStatus);
  return (status == HE_OK);
#else
  return true;
#endif
}

bool FIFOInterface::StartWriteVector(void * Data,int size)
{
#ifdef Hunt
  HE_WORD status;
  status = HeTestIo(hDevice, WriteIoStatus);
  if (status != HE_OK)
	  return false;

  status = HeWrite(hDevice, Data, size, WriteIoStatus);
  if((status != HE_IoInProgress) && (status != HE_OK))
	  return false;

  return true;
#else
  return true;
#endif
}

bool FIFOInterface::IsReadComplete()
{
#ifdef Hunt
  return (HeTestIo(hDevice, ReadIoStatus) == HE_OK);
#else
  return true;
#endif
}

bool FIFOInterface::IsWriteComplete()
{
#ifdef Hunt
  return (HeTestIo(hDevice, WriteIoStatus) == HE_OK);
#else
  return true;
#endif
}

bool FIFOInterface::WaitForReadComplete()
{
#ifdef Hunt
  HE_WORD status;
  status = HeTestIo(hDevice, ReadIoStatus);
  if(status == HE_IoInProgress)
	status = HeWaitForIo(hDevice, ReadIoStatus);

  return (status == HE_OK);
#else
  return true;
#endif
}

bool FIFOInterface::WaitForWriteComplete()
{
#ifdef Hunt
  HE_WORD status;
  status = HeTestIo(hDevice, WriteIoStatus);
  if(status == HE_IoInProgress)
	status = HeWaitForIo(hDevice, WriteIoStatus);

  return (status == HE_OK);
#else
  return true;
#endif
}

FIFOInterface::~FIFOInterface()
{
#ifdef Hunt
  HeClose(&hDevice);
#endif
  InterfaceLock->Free();
}
