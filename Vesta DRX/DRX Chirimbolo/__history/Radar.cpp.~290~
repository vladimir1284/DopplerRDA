//---------------------------------------------------------------------------
#include "Radar.h"
#include "QuickSyn.h"
#include "IntegratedData.h"
#include "DataParameters.h"
#include "FIFOinterface.h"

#pragma hdrstop

#pragma package(smart_init)
//---------------------------------------------------------------------------
__fastcall Radar::Radar(bool CreateSuspended) : TThread(CreateSuspended){
	gathering      = false;
	saving         = false;
	CurrentIntAzim = 0;
	CurrentIntElev = 0;
	AFCChangesInhibited = false;
	LastError = "";

	Stalo = new QuickSyn();
	Stalo->Connect();
	Stalo->Reset();
	Stalo->GetStatus();

	SetupInterface();
	RequestedPulseMode = LP_MODE;
	CurrentPulseMode = SP_MODE;
	UpdatePulseModeNeeded = false;
	UpdatePulseMode = (int)1 << Code_Sync;

	setPulseMode(LongPulse);
	setPRF_Mode(SinglePRF);
	setPRF_Rate(PRF_Rate_None);
	setSectorMode(0);
	setOutputMode(true);

	SetSyncWord();
}
//---------------------------------------------------------------------------

void Radar::setPulseMode(int value){
	if(value == LongPulse)
		RequestedPulseMode = LP_MODE;
	else
		RequestedPulseMode = (RequestedPRF_Mode == SinglePRF) ? SP_MODE : RequestedPRF_Rate * 5;
}

void Radar::setPRF_Mode(int value){
	RequestedPRF_Mode = value;
	if(RequestedPulseMode != LP_MODE)
		RequestedPulseMode = (RequestedPRF_Mode == SinglePRF) ? SP_MODE : RequestedPRF_Rate * 5;
}

void Radar::setPRF_Rate(int value){
	RequestedPRF_Rate = value  & 0x3;
	if(RequestedPulseMode != LP_MODE)
		RequestedPulseMode = (RequestedPRF_Mode == SinglePRF) ? SP_MODE : RequestedPRF_Rate * 5;
}

void Radar::setSectorMode(int value){
	RequestedSectorMode = value && 0xFF;
}

void Radar::setOutputMode(bool value){
	RequestedOutputMode = value;
}

int Radar::getPulseMode(){
	return CurrentPulseMode;
}

int Radar::getPRF_Mode(){
	return CurrentPRF_Mode;
}

int Radar::getPRF_Rate(){
	return CurrentPRF_Rate;
}

int Radar::getSectorMode(){
	return CurrentSectorMode;
}

bool Radar::getOutputMode(){
	return CurrentOutputMode;
}

void Radar::SetSyncWord(){
	if(!UpdatePulseModeNeeded){
		DelayPulse = (RequestedPulseMode != CurrentPulseMode) && ((RequestedPulseMode == LP_MODE) || (CurrentPulseMode == LP_MODE));

		int Sync_Code = (int)1 << Code_Sync;

		int Sync_Data = 0;
		if(RequestedPulseMode != LP_MODE)
			Sync_Data |= (int)1 << Value_Pulse_Length;

		if(RequestedPRF_Mode == DualPRF)
			Sync_Data |= (int)1 << Value_PRF_Mode;

		//Sync_Data |= (int)1 << Value_Calibration_Mode;

		Sync_Data |= RequestedPRF_Rate << Value_PRF_Rate;
		Sync_Data |= RequestedSectorMode << Value_Sector_Mode;

		if(RequestedOutputMode)
			Sync_Data |= (int)1 << Value_Sync_Output;

		int RemoveSignal = UpdatePulseMode | ((int)1 << Value_Sync_Output);

		DIOInterface->WriteWord(RemoveSignal); //Remove signal
		CurrentOutputMode = false;

		UpdatePulseMode = Sync_Code | Sync_Data;
		UpdatePulseModeNeeded = true;
	}
}

//Antena
void Radar::SetCurrentIntAzim(int Value){
	CurrentIntAzim = Value;
}

void Radar::SetCurrentIntElev(int Value){
	CurrentIntElev = Value;
}

int  Radar::GetCurrentIntAzimut(){
  return CurrentIntAzim;
}

int  Radar::GetCurrentIntElev(){
	return CurrentIntElev;
}

int Radar::GetCurrentPulseMode(){
	return CurrentPulseMode - (CurrentPulseMode%5);
}

bool Radar::SyncChanged(){
	return RequestedPulseMode != GetCurrentPulseMode();
}

void Radar::ClearDigitalOutputs(){
	DIOInterface->WriteWord(0x00000000);
}

//---------------------------------------------------------------------------

__fastcall Radar::SetupInterface(){
  DIOInterface = new FIFOInterface(FifoB);
  NCOInterface = new FIFOInterface(FifoE);

  Stalo->SetOutputON();

  CurrentSTALOFrequency = 2950e6;
  SetStaloFrequency(2950e6);   // Initalise Stalo to nominal freq.
  SetNCOFrequency(30e6);
}

//---------------------------------------------------------------------------
void __fastcall Radar::Execute(){
  ClearDigitalOutputs();

  while(!Terminated){
	if(UpdatePulseModeNeeded){
	   if(DelayPulse)
	   		Sleep(3000);
	   DIOInterface->WriteWord(UpdatePulseMode);
	   UpdatePulseModeNeeded = false;

	   /* TODO : borrar estra linea para cerrar el lazo de sincronismo */
	   CurrentPulseMode  = RequestedPulseMode;
	   CurrentPRF_Mode   = RequestedPRF_Mode;
	   CurrentPRF_Rate   = RequestedPRF_Rate;
	   CurrentSectorMode = RequestedSectorMode;
	   CurrentOutputMode = RequestedOutputMode;

	   ClearDigitalOutputs();
	}
	if(Settling){
	   /* TODO : quitar comentarios para activar lazo del stalo */
	   /*
	   UINT64 StaloFrequency = Stalo->GetFrequency();
	   if(abs(RequestedSTALOFrequency - StaloFrequency) < 100e3){
			Settling = false;
			CurrentSTALOFrequency = StaloFrequency;
	   }
	   */
	   Sleep(500);
	   Settling = false;
       CurrentSTALOFrequency = RequestedSTALOFrequency;
	}
	else{
	   if(!AFCChangesInhibited && FreqUpdateNeeded){
		   OutputStaloFrequencyDemand();
	   }
	}
	Sleep(50);
  }
  Stalo->~QuickSyn();
}
//---------------------------------------------------------------------------

void Radar::SetStaloFrequency(UINT64 freq){
  if(!Settling){
	  RequestedSTALOFrequency = freq;
	  FreqUpdateNeeded = true;
  }
}

void Radar::OutputStaloFrequencyDemand(){
  Settling = true;
  FreqUpdateNeeded = false;
  Stalo->SetFrequency(RequestedSTALOFrequency);
};

bool Radar::OutputNCOFrequencyDemand(UINT64 MeasuredIF){
	HE_INT32 NCOwordout = 0;
	NCOwordout = (MeasuredIF / CLOCKSPD) * TWOTO32 + 0.5;
	NCOInterface->WriteWord(NCOwordout);
};

UINT64 Radar::GetSTALOFrequency(){
   return CurrentSTALOFrequency;
}

UINT64 Radar::GetNCOFrequency(){
   return RequestedNCOFrequency;
}

void Radar::SetNCOFrequency(UINT64 freq){
  RequestedNCOFrequency = freq;
  OutputNCOFrequencyDemand(RequestedNCOFrequency);
}

void Radar::SetAFCChangesInhibited(bool Value){
   AFCChangesInhibited = Value;
}

bool Radar::GetAFCChangesInhibited(){
   return AFCChangesInhibited;
}

bool Radar::StaloChanged(){
	return Settling && !AFCChangesInhibited;
}

bool Radar::GetGathering(){
	return gathering;
}

void Radar::SetGathering(bool val){
	if(!saving){
		gathering = val;
		gatheringCount = RAW_HALF_DEGREES;
	}
}

void Radar::SetGatheringCount(int count){
	if(!saving){
		gatheringCount = count;
		gathering = true;
	}
}

void Radar::DecreaseGatheringCount(){
	gatheringCount--;
	if(gatheringCount == 0)
		gathering = false;
}

int Radar::GetGatheringCount(){
	return gatheringCount;
}

bool Radar::GetSaving(){
	return saving;
}

void Radar::SetSaving(bool val){
	LastError = "";
	if(!gathering){
		saving = val;
		savingCount = 1;
	}
}

void Radar::SetSavingCount(int count){
	LastError = "";
	if(!gathering){
		savingCount = count;
		saving = true;
	}
}

int Radar::GetSavingCount(){
	return savingCount;
}

String Radar::GetLastError(){
	return LastError;
}

void Radar::SetLastError(String error){
	LastError = error;
	saving = false;
    gathering = false;
}

