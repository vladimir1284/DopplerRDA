unit AntennaWSImpl;

interface

uses InvokeRegistry, Types, XSBuiltIns, AntennaWSIntf, CommunicationObj;

type
  TAntennaWS = class(TCommObj, IAntennaWS)
  public
    //Status
    function Get_Local: WordBool; safecall;
    function Get_Ventilacion: WordBool; safecall;
    function Get_Status: RadarStatusEnum; safecall;

    function Get_SyncMark: Integer; safecall;
    function Get_SyncMarkDirection: WordBool; safecall;

    function Get_Excitacion: WordBool; safecall;
    function Get_Limite_N: WordBool; safecall;
    function Get_Limite_P: WordBool; safecall;
    function Get_Cupula_Cerrada: WordBool; safecall;

    function Get_Fuente_Exitacion_Code: Integer; safecall;
    function Get_Fuente_Exitacion_Unit: Double; safecall;
    function Get_Fuente_5V_Code: Integer; safecall;
    function Get_Fuente_5V_Unit: Double; safecall;
    function Get_Fuente_12V_Code: Integer; safecall;
    function Get_Fuente_24V_Code: Integer; safecall;
    function Get_Fuente_24V_Unit: Double; safecall;
    function Get_Fuente_12V_Unit: Double; safecall;

    function Get_Rango_Fuente_5V: Integer; safecall;
    function Get_Rango_Fuente_12V: Integer; safecall;
    function Get_Rango_Fuente_24V: Integer; safecall;
    function Get_Rango_Fuente_Excitacion: Integer; safecall;
    function Get_Sector_Fuente_5V: Integer; safecall;
    function Get_Sector_Fuente_12V: Integer; safecall;
    function Get_Sector_Fuente_24V: Integer; safecall;
    function Get_Sector_Fuente_Excitacion: Integer; safecall;
    //Control
    procedure Encender_Acc; safecall;
    procedure Apagar_Acc; safecall;
    procedure Alarma_Sonora(Tiempo: Integer); safecall;
    procedure Set_SyncMark(direction: WordBool; rays: Shortint); safecall;

    procedure Set_Rango_Fuente_5V(Value: Integer); safecall;
    procedure Set_Sector_Fuente_5V(Value: Integer); safecall;
    procedure Set_Sector_Fuente_12V(Value: Integer); safecall;
    procedure Set_Rango_Fuente_12V(Value: Integer); safecall;
    procedure Set_Rango_Fuente_24V(Value: Integer); safecall;
    procedure Set_Sector_Fuente_24V(Value: Integer); safecall;
    procedure Set_Rango_Fuente_Excitacion(Value: Integer); safecall;
    procedure Set_Sector_Fuente_Excitacion(Value: Integer); safecall;

    function CheckCredentials : boolean; override;
  end;

implementation

uses
  ElbrusTypes, Elbrus, Users, ManagerDRX;

{ TAntennaWS }

procedure TAntennaWS.Alarma_Sonora(Tiempo: Integer);
begin
  if InControl
    then Elbrus.Alarma_Sonora(Tiempo);
end;

procedure TAntennaWS.Apagar_Acc;
begin
  if InControl
    then Elbrus.Apagar_Accionamiento;
end;

function TAntennaWS.CheckCredentials: boolean;
begin
  result := CheckAuthHeader >= ul_Operator;
end;

procedure TAntennaWS.Encender_Acc;
begin
  if InControl
    then Elbrus.Encender_Accionamiento;
end;

function TAntennaWS.Get_Excitacion: WordBool;
begin
  result := Snapshot.Digital_Input and di_Excitacion = di_Excitacion;
end;

function TAntennaWS.Get_Cupula_Cerrada: WordBool;
begin
  Result := (Snapshot.Digital_Input and di_Cupula_Cerrada) = di_Cupula_Cerrada;;
end;

function TAntennaWS.Get_Fuente_12V_Code: Integer;
begin
  Result := Snapshot.Analog_Input[ai_Fuente_12V_P];
end;

function TAntennaWS.Get_Fuente_12V_Unit: Double;
begin
  Result := Snapshot.Analog_Input_Voltage[ai_Fuente_12V_P];
end;

function TAntennaWS.Get_Fuente_24V_Code: Integer;
begin
  Result := Snapshot.Analog_Input[ai_Fuente_24V_P];
end;

function TAntennaWS.Get_Fuente_24V_Unit: Double;
begin
  Result := Snapshot.Analog_Input_Voltage[ai_Fuente_24V_P];
end;

function TAntennaWS.Get_Fuente_5V_Code: Integer;
begin
  Result := Snapshot.Analog_Input[ai_Fuente_5V_P];
end;

function TAntennaWS.Get_Fuente_5V_Unit: Double;
begin
  Result := Snapshot.Analog_Input_Voltage[ai_Fuente_5V_P];
end;

function TAntennaWS.Get_Fuente_Exitacion_Code: Integer;
begin
  Result := Snapshot.Analog_Input[ai_Fuente_Excitacion];
end;

function TAntennaWS.Get_Fuente_Exitacion_Unit: Double;
begin
  Result := Snapshot.Analog_Input_Voltage[ai_Fuente_Excitacion];
end;

function TAntennaWS.Get_Limite_N: WordBool;
begin
  Result := Snapshot.Digital_Input and di_Antena_Limite_N = di_Antena_Limite_N;
end;

function TAntennaWS.Get_Limite_P: WordBool;
begin
  Result := Snapshot.Digital_Input and di_Antena_Limite_P = di_Antena_Limite_P;
end;

function TAntennaWS.Get_Rango_Fuente_12V: Integer;
begin
  Result := integer(Snapshot.AI_Range[ai_Fuente_12V_P]);
end;

function TAntennaWS.Get_Rango_Fuente_24V: Integer;
begin
  Result := integer(Snapshot.AI_Range[ai_Fuente_24V_P]);
end;

function TAntennaWS.Get_Rango_Fuente_5V: Integer;
begin
  Result := integer(Snapshot.AI_Range[ai_Fuente_5V_P]);
end;

function TAntennaWS.Get_Rango_Fuente_Excitacion: Integer;
begin
  Result := integer(Snapshot.AI_Range[ai_Fuente_Excitacion]);
end;

function TAntennaWS.Get_Local: WordBool;
begin
  Result := Snapshot.Digital_Input and di_Antena_Local = di_Antena_Local;
end;

function TAntennaWS.Get_Sector_Fuente_12V: Integer;
begin
  Result := integer(Snapshot.AI_Sector[ai_Fuente_12V_P]);
end;

function TAntennaWS.Get_Sector_Fuente_24V: Integer;
begin
  Result := integer(Snapshot.AI_Sector[ai_Fuente_24V_P]);
end;

function TAntennaWS.Get_Sector_Fuente_5V: Integer;
begin
  Result := integer(Snapshot.AI_Sector[ai_Fuente_5V_P]);
end;

function TAntennaWS.Get_Sector_Fuente_Excitacion: Integer;
begin
  Result := integer(Snapshot.AI_Sector[ai_Fuente_Excitacion]);
end;

function TAntennaWS.Get_Status: RadarStatusEnum;
begin
  if Snapshot.Antena_ON
    then if Snapshot.Antena_Ok
           then result := rsOk
           else result := rsFailure
    else result := rsOff;
end;

function TAntennaWS.Get_SyncMark: Integer;
begin
  if (MasterDRX <> nil)
    then result := MasterDRX.Sync_WS.Get_Sector_Mode
    else result := 0;
end;

function TAntennaWS.Get_SyncMarkDirection: WordBool;
begin
  if (MasterDRX <> nil)
    then result := MasterDRX.Sync_WS.Get_SectorDirection
    else result := false;
end;

function TAntennaWS.Get_Ventilacion: WordBool;
begin
  Result := Snapshot.Digital_Input and di_Antena_Ventilacion_On = di_Antena_Ventilacion_On;
end;

procedure TAntennaWS.Set_Rango_Fuente_12V(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Range(ai_Fuente_12V_P, TAIRange(Value));
end;

procedure TAntennaWS.Set_Rango_Fuente_24V(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Range(ai_Fuente_24V_P, TAIRange(Value));
end;

procedure TAntennaWS.Set_Rango_Fuente_5V(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Range(ai_Fuente_5V_P, TAIRange(Value));
end;

procedure TAntennaWS.Set_Rango_Fuente_Excitacion(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Range(ai_Fuente_Excitacion, TAIRange(Value));
end;

procedure TAntennaWS.Set_Sector_Fuente_12V(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Sector(ai_Fuente_12V_P, TAIRange(Value));
end;

procedure TAntennaWS.Set_Sector_Fuente_24V(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Sector(ai_Fuente_24V_P, TAIRange(Value));
end;

procedure TAntennaWS.Set_Sector_Fuente_5V(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Sector(ai_Fuente_5V_P, TAIRange(Value));
end;

procedure TAntennaWS.Set_Sector_Fuente_Excitacion(Value: Integer);
begin
  if InControl
    then Elbrus.Set_AI_Sector(ai_Fuente_Excitacion, TAIRange(Value));
end;

procedure TAntennaWS.Set_SyncMark(direction: WordBool; rays: Shortint);
begin
  if InControl and (MasterDRX <> nil)
    then MasterDRX.Sync_WS.Set_Sector_Mode(direction, rays);
end;

initialization
  { Invokable classes must be registered }
  InvRegistry.RegisterInvokableClass(TAntennaWS);

end.
 